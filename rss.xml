<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Tinman</title><link>http://isaaclacoba.github.io/tinman/</link><description>blog del proyecto Tinman</description><atom:link href="http://isaaclacoba.github.io/tinman/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>es</language><lastBuildDate>Mon, 09 Mar 2015 17:12:58 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Creando coches para el juego</title><link>http://isaaclacoba.github.io/tinman/posts/creando-coche/creando-coches-para-el-juego.html</link><dc:creator>Isaac Lacoba Molina</dc:creator><description>&lt;div&gt;&lt;img alt="tinman.jpg" class="align-center" id="logo-tinman" src="http://isaaclacoba.github.io/tinman/posts/creando-coche/tinman.jpg"&gt;
&lt;p&gt;En esta entrada se va a hablar acerca del componente de dinámica de
vehículos que incorpora Bullet Physics, el motor de físicas que se
está usando en este proyecto. Se explicará como inicializar el
vehículo y los elementos mas relevantes de éste módulo de Bullet. Por
último, mostraremos un pequeño ejemplo que servirá para ejemplificar
lo hablado en esta entrada.&lt;/p&gt;
&lt;p&gt;Pero para empezar, vamos a introducir brevemente los principios
físicos que permiten el movimiento de un coche.&lt;/p&gt;
&lt;div class="section" id="un-poco-de-teoria"&gt;
&lt;h2&gt;Un poco de teoría&lt;/h2&gt;
&lt;p&gt;A grandes rasgos, el movimiento de un coche radica en un conjunto de
fuerzas que se aplican sobre las ruedas y el chasis del vehículo. En
la dirección del movimiento del coche se aplica una fuerza
longitudinal, compuesta por la fuerza que aplican las ruedas, la
fuerza de frenado, la resistencia que oponen los neumáticos y la
resistencia del aire. Por otro lado, en giros existen fuerzas
laterales causadas por la fricción lateral de las ruedas, además del
momento angular del coche y el esfuerzo de torsión causado por las
fuerzas laterales.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nota:&lt;/em&gt; este apartado es un resume del siguiente &lt;a class="reference external" href="http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games.html"&gt;artículo&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="movimientos-rectilineos"&gt;
&lt;h3&gt;Movimientos rectilíneos&lt;/h3&gt;
&lt;p&gt;La primera fuerza que entra en juego es la fuerza de tracción. La
fuerza de tracción es ocasionada por la fricción del neumático contra
la superficie del asfalto, que es ocasinada por el desplazamiento
del neumático contra el asfalto debido al par motor aplicado por este.&lt;/p&gt;
&lt;p&gt;El par motor es el momento de fuerza que ejerce el motor del coche
sobre el eje de transmisión, expresado en N.m. El par motor que
puede entregar depende de la velocidad a la cuál este gira,
típicamente expresada en rpm. La relación momento torsor/rpm no es
lineal, pero se representa normalmente como una curva llamada función
del momento torsor (La curva exacta de cada motor viene determinada
por los test que los fabricantes los someten estos motores). Aquí
vemos un ejemplo para el motor del Corvette LS1(5.7 litros V8).&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/cttorq.gif" src="http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/cttorq.gif"&gt;
&lt;p class="caption"&gt;Curva de par motor/potencia del Corvette LS1&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;El eje de abscisas está expresado en revoluciones por minuto(rpm) y el
de ordenadas en Caballos de potencia. La curva anterior sólo esta
definida en el rango de rpm en el que trabaja el motor, que para el
ejemplo es en el intervalo 1000 y 6000 rpm. La curva de par motor
representa la máxima potencia que puede entregar el motor para unas
rpm dadas.&lt;/p&gt;
&lt;p&gt;El par motor se transmite a través de los engranajes hasta llegar a
las ruedas, que se acaba conviertiendo en una fuerza a través del giro
de esta sobre la carretera, dividido por el radio.  La siguiente
imagen ilustra el proceso:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/tc_torques.png" src="http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/tc_torques.png"&gt;
&lt;p class="caption"&gt;Par motor aplicado sobre el eje de tracción&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A continuación podemos ver la formula que convierte el par motor
proporcionado por el motor en fuerza de "conducción"; es decir, la
fuerza longitudinal que ejercen las ruedas del eje de tracción sobre la
carretera:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
Fconducción = \frac{u * Pmotor * Xg * Xm * n}{Rw}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Donde:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;u es el vector unitario que refleja la orientación del coche&lt;/li&gt;
&lt;li&gt;Pmotor es el par motor en rpm&lt;/li&gt;
&lt;li&gt;xm es la relación de transmisión de las marchas&lt;/li&gt;
&lt;li&gt;xd es el coeficiente del &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Mecanismo_diferencial"&gt;diferencial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;n es la eficiencia de la transmisión&lt;/li&gt;
&lt;li&gt;Rw es el radio de la rueda.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si esta fuera la única fuerza que influye en el movimiento, el coche
aceleraría hasta alcanzar una velocidad infinita. Aquí es donde entran
en juego las resistencia. A altas velocidades la mas importante es la
resistencia del aire. Esta fuerza es muy importante porque es
proporcional al cuadrado de la velocidad.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
Fdrag = - Cdrag * v * |v|
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Donde:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cdrag es una constante de resistencia del aire.&lt;/li&gt;
&lt;li&gt;v es el vector de velocidad.&lt;/li&gt;
&lt;li&gt;|v| el módulo del vector.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El módulo del vector velocidad es la velocidad a la que nos referimos
comunmente, expresada en km/h cuando hablamos de vehículos.&lt;/p&gt;
&lt;p&gt;La siguiente resistencia que encontramos es la resistencia al giro. Es
causada por la fricción entre la goma del neumático y la superficie de
contacto debido al desplazamiento de las ruedas.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
Frr = -Crr Frr = - Crr * v
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Donde:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Crr es una constante de rozamiento.&lt;/li&gt;
&lt;li&gt;v el vector de velocidad.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A bajas velocidades la resistencia al giro es la mayor resistencia que
encuentra el coche, mientras que a altas velocidades sería la
resistencia del aire.&lt;/p&gt;
&lt;p&gt;La fuerza logitudinal total es la suma de estas tres fuerzas:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
Flongitudinal =   Fconducción + Fdrag   + Frr
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="transferencia-de-peso"&gt;
&lt;h3&gt;Transferencia de peso&lt;/h3&gt;
&lt;p&gt;Un efecto importante cuando se acelera o frena es el efecto de la
transferencia dinámica de peso. Cuando se frena el coche baja el morro
hacia adelante. Durante la aceleración, el coche se inclina hacia
atrás. Esto es debido a que el centro de gravedad el coche cambia. El
efecto de esto es que el peso sobre las ruedas traseras aumenta
durante la aceleración, mientras que las ruedas delanteras deben
soportar menos peso.&lt;/p&gt;
&lt;p&gt;La distribución de peso afecta dramáticamente a la tracción máxima por
rueda. Esto es debido a que el límite de fricción es proporcional a la
carga en esa rueda:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
Fmax = mu * Pesocoche
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Donde:
- mu es coeficiente de rozamiento del neumático.&lt;/p&gt;
&lt;p&gt;Para vehiculos estacionados el peso total del coche (W = M*g) se
distribuye sobre las ruedas delanteras y traseras de acuerdo a la
distancia entre la parte el eje delantero y trasero al centro de masa:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
Peso ruedas traseras = \frac{c}{L} * M
\end{equation*}
&lt;/div&gt;
&lt;div class="math"&gt;
\begin{equation*}
Peso ruedas delanteras = \frac{b}{L} * M
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Donde:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;b&lt;/em&gt; y &lt;em&gt;c&lt;/em&gt; son la distancia al centro de gravedad de los ejes delanteros y traseros.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;L&lt;/em&gt; es el grosor de las ruedas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si el coche acelera o desacelera en un factor a, el peso frontal y trasero se calculan como sigue:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
Peso ruedas traseras = \frac{c}{L} * W - \frac{h}{L} * M * a
\end{equation*}
&lt;/div&gt;
&lt;div class="math"&gt;
\begin{equation*}
Peso ruedas delanteras = \frac{c}{L} * W + \frac{h}{L} * M * a
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Donde:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;h&lt;/em&gt; es la altura del centro de gravedad,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;M&lt;/em&gt; es la masa del coche y&lt;/li&gt;
&lt;li&gt;a la aceleración&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/ctwd.jpg" src="http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/ctwd.jpg"&gt;
&lt;p class="caption"&gt;Distribución del peso del coche sobre las ruedas&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="giros"&gt;
&lt;h3&gt;Giros&lt;/h3&gt;
&lt;p&gt;Una cosa a tener en cuenta cuando estamos simulando giros es que la
simulación de las propiedades física a baja velocidad es diferente de
la simulación a alta velocidad. A velocidades bajas (aparcamiento,
maniobras), las ruedas giran mas o menos en la dirección en la que
éstas apuntan. Para simular estos giros no se necesita considerar las
fuerzas y ni la masas. En otras palabras, es un problema de cinética
no de dinámica.&lt;/p&gt;
&lt;p&gt;A velocidades más altas, puede ocurrir que las ruedas apunten en una
dirección mientras que se muevan en otra. En otras palabras, las
ruedas a veces pueden tener una velocidad que no esté alineada con la
orientación de la rueda. Esto significa que hay una componente de
velocidad que está en un ángulo recto a la rueda. Por supuesto, esto
causa mucha fricción. Después de todo una rueda está diseñado para
rodar en una dirección particular sin demasiado esfuerzo.  En giros a
alta velocidad, las ruedas están siendo empujadas hacia los lados y
tenemos que tomar estas fuerzas en cuenta.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="vehiculos-en-bullet"&gt;
&lt;h2&gt;Vehículos en Bullet&lt;/h2&gt;
&lt;p&gt;El componente de dinámica de vehículos de Bullet ofrece una
implementación basada en rayqueries, de tal manera que se lanza un
rayo por cada rueda del coche. Usando como referencia el punto de
contacto del rayo contra el suelo, calculamos la longitud y la fuerza
de la suspensión. La fuerza de la suspensión se aplica sobre el
chassis de forma que no choque contra el suelo. De hecho, el chasis
del vehículo flota sobre el suelo sustentándose sobre los rayos. La
fuerza de fricción se calcula por cada rueda que esté en contacto con
el suelo. Esto se aplica como una fuerza hacia los lados y adelante
por cada rueda; es decir, por cada rayo.&lt;/p&gt;
&lt;p&gt;Hay una serie de clases que son importantes a la hora de utilizar vehículos en Bullet:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtRaycastVehicle.html"&gt;btRaycastVehicle&lt;/a&gt;: Es la clase que modela el comportamiento del coche.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;btRaycastVehicle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;btRaycastVehicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;btVehicleTuning&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;tuning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;btRigidBody&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;chassis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;btVehicleRaycaster&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="n"&gt;raycaster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/structbtVehicleRaycaster.html"&gt;btVehicleRaycaster&lt;/a&gt;: clase que proporciona una abstracción a la clase btRaycastVehicle para la gestión de rayqueries.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtRigidBody.html"&gt;btRigidBody&lt;/a&gt;: clase que representa un &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Cuerpo_r%C3%ADgido"&gt;cuerpo rigido&lt;/a&gt;.
- &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtRaycastVehicle_1_1btVehicleTuning.html"&gt;btVehicleTuning&lt;/a&gt;: clase que sirve como estructura de datos para el almacenamiento de algunos de los atributos mas importantes del vehículo. Los atributos son:&lt;ul&gt;
&lt;li&gt;btScalar m_suspensionStiffness: La rigidez (stiffness) de la
suspensión. Se recomienda asignarle el valor de 10.0 para
Todoterrenos, 50.0 para coches deportivos y 200.0 para coches de
formula 1.&lt;/li&gt;
&lt;li&gt;btScalar    m_suspensionCompression.&lt;/li&gt;
&lt;li&gt;btScalar m_suspensionDamping: Coeficiente de amortiguación en el caso de que esté comprimida. Toma valores entre 0 y 1. El valor mínimo hace que la amortiguación rebote, mientras que el valor máximo sea lo mas rígida posible. Entre 0.1 y 0.3 la amortiguación se suele comportar correctamente.&lt;/li&gt;
&lt;li&gt;btScalar    m_maxSuspensionTravelCm: La distancia máxima que puede ser comprimida la suspensión, en centímetros.&lt;/li&gt;
&lt;li&gt;btScalar    m_frictionSlip:  El coeficiente de fricción entre el neumatico y el suelo. Para coches realistas debería tener el valor de 0.8, pero aumentando el valor mejora la conducción. Para coches de kart se aconseja asignarle un valores muy altos (10000.0).&lt;/li&gt;
&lt;li&gt;btScalar    m_maxSuspensionForce:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para ampliar mas acerca de este tema, el autor de la implementación del módulo de vehículos escribió un &lt;a class="reference external" href="https://docs.google.com/document/d/18edpOwtGgCwNyvakS78jxMajCuezotCU_0iezcwiFQc/edit"&gt;documento&lt;/a&gt; en el que hablaba de los aspectos mas relevantes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="veamos-algo-de-codigo"&gt;
&lt;h2&gt;Veamos algo de código&lt;/h2&gt;
&lt;p&gt;A continuación vamos a explicar cómo inicializar un vehículo en Bullet
y las operaciones mas importantes. En este ejemplo me voy a apoyar del
&lt;a class="reference external" href="https://bitbucket.org/arco_group/tfg.tinman/src/4ed771a44142c75b196e147a6cec8d2da220aab5/src/managers/physics.cpp?at=master"&gt;gestor de físicas&lt;/a&gt;
que he escrito para mi proyecto, que me abstrae a la hora de crear
cuerpos rígidos, formas de colisión, etcétera. El código completo
relativo al coche se puede encontrar en la &lt;a class="reference external" href="https://bitbucket.org/arco_group/tfg.tinman/src/4ed771a44142c75b196e147a6cec8d2da220aab5/src/model/car.cpp?at=master"&gt;clase Car&lt;/a&gt;
de mi proyecto.&lt;/p&gt;
&lt;p&gt;Los pasos que hay que seguir para inicializar un coche en bullet son:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Creamos un cuerpo rígido&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="n"&gt;car_dimensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;btVector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;btBoxShape&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;chassis_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;physics&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;create_shape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car_dimensions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;btVector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;btCompoundShape&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;compound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;physics&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;create_compound_shape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chassis_box&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;btQuaternion&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;btQuaternion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btVector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;btScalar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;btVector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;btTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;chassis_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"chassis_node"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;btRigidBody&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;chassis_body_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;physics&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;create_rigid_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chassis_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;compound&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;chassis_body_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setActivationState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISABLE_DEACTIVATION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;En el fragmento anterior se crean dos formas de colisión: una caja y una forma compuesta(btCompoundShape), a la que asociamos la primera. Esto permite desplazar la caja una unidad en el eje Y, de forma que esté un poco alzada, indicandolo a través de la variable &lt;em&gt;origin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Tras esto se crea un cuerpo rígido. El primer atributo es una estructura de datos que almacena las rotaciones y la posición inicial. El segundo es un nodo de ogre, dado que mi gestor de físicas integra Bullet con Ogre. El tercer argumento es la forma compuesta que hemos creado antes y, por último, la masa del vehículo expresada en kilogramos.&lt;/p&gt;
&lt;p&gt;El último paso consiste en indicarle a Bullet que el cuerpo rígido que acabamos de crear nunca debe ser desactivado; es decir, debe tenerlo en cuenta en todo momento en cada iteración de la simulación física. Bullet ignora algunos cuerpos rígidos que considera que no van a interaccionar en algún momento con otros cuerpos rigidos. Sin embargo, esto tiene como contrapunto que puede que el motor ignore acciones por parte del usuario, como una invocación al método de aceleración. Haciendo que nunca se desactive evitamos esto.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Añadimos las ruedas. Para esto, usamos el método addWheel de la clase btRaycastVehicle(la clase que modela el vehículo):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;btWheelInfo&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;btRaycastVehicle&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;addWheel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;connectionPointCS0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wheelDirectionCS0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;wheelAxleCS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;btScalar&lt;/span&gt; &lt;span class="n"&gt;suspensionRestLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;btScalar&lt;/span&gt; &lt;span class="n"&gt;wheelRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;btVehicleTuning&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tuning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isFrontWheel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Este método recibe:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;const btVector3 &amp;amp;connectionPointCS0: la posición de donde va a salir el rayo que representa la rueda. Esta posición debe estar dentro del chasis del coche o de lo contrario esa rueda no aplicará fuerza de tracción.&lt;/li&gt;
&lt;li&gt;const btVector3 &amp;amp;wheelDirectionCS0: El vector dirección de la rueda.&lt;/li&gt;
&lt;li&gt;const btVector3 &amp;amp;wheelAxleCS: El eje sobre el que estará  el eje de la rueda.&lt;/li&gt;
&lt;li&gt;btScalar suspensionRestLength: La longitud máxima de la suspensión, en metros.&lt;/li&gt;
&lt;li&gt;btScalar wheelRadius: radio de la rueda,&lt;/li&gt;
&lt;li&gt;const btVehicleTuning &amp;amp;tuning: Ver explicación anterior.&lt;/li&gt;
&lt;li&gt;bool isFrontWheel: indica si la rueda está en el eje delantero o el trasero.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Creamos el coche:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;btDefaultVehicleRaycaster&lt;/span&gt; &lt;span class="n"&gt;vehicle_raycaster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;btDefaultVehicleRaycaster&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;physics&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dynamics_world_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;btRaycastVehicle&lt;/span&gt; &lt;span class="n"&gt;vehicle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;btRaycastVehicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tuning_&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chassis_body_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vehicle_raycaster_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;physics&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;dynamics_world_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;addVehicle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vehicle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Como vemos, el último paso consiste en crear un objeto de tipo btRaycastVehicle y añadirlo al mundo a través del método addVehicle de la clase btDiscreteDynamicsWorld. Bullet ofrece una implementación por defecto de la intefaz btVehicleRaycaster, lo que nos ahorra tener que implementarla nosotros.&lt;/p&gt;
&lt;p&gt;Acelerar:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;CarController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;accelerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_engine_&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;  &lt;span class="n"&gt;f_max_engine_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;accelerating_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;f_engine_&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;acceleration_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;accelerating_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Frenar:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;CarController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;brake&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;accelerating_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;braking_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;f_braking_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f_max_braking_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;f_engine_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_engine_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;f_max_engine_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f_max_engine_&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f_engine_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;deceleration_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Girar:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
 &lt;span class="kt"&gt;void&lt;/span&gt;
 &lt;span class="n"&gt;CarController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Direction&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="n"&gt;turn_wheels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;steering_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steering_&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;steering_clamp_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;steering_clamp_&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;steering_&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;steering_increment_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;turn_wheels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Direction&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="n"&gt;steering_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steering_&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;steering_clamp_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
        &lt;span class="n"&gt;steering_clamp_&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;steering_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;steering_increment_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Para que el coche acelere se ejecuta la siguiente función, que aplica par motor a las ruedas del coche&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;vehicle_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;applyEngineForce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f_engine_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;vehicle_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;applyEngineForce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;f_engine_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Para hacer que el coche gire se aplica un giro a las ruedas:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;vehicle_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setSteeringValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;steering_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;vehicle_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setSteeringValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;steering_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;El primer argumento de las funciones anteriores representa el valor de par motor o steering aplicado a las ruedas. El segundo argumento es el índice de las ruedas. En este ejemplo, corresponde con las ruedas delanteras.&lt;/p&gt;
&lt;!--  --&gt;
&lt;!-- Hola, parece que tienes algo de curiosidad. --&gt;
&lt;!-- Como recompensa, aquí tienes la traducción del artículo completo sobre el que me he basado para escribir el apartado teórico de este post --&gt;
&lt;!--  --&gt;
&lt;!-- // -*- coding:utf-8; tab-width:4; mode:cpp -*- --&gt;
&lt;!--  --&gt;
&lt;!-- Original: http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games.html --&gt;
&lt;!--  --&gt;
&lt;!-- **************** --&gt;
&lt;!-- Introducción --&gt;
&lt;!-- **************** --&gt;
&lt;!--  --&gt;
&lt;!-- Este tutorial trata el tema de la simulación de coches en --&gt;
&lt;!-- videojuegos. Se tratará las propiedades físicas que modelan el --&gt;
&lt;!-- comportamiento de un coche orientándolo a su aplicación a videojuegos. --&gt;
&lt;!--  --&gt;
&lt;!-- Uno de los puntos clave de la simulación en videojuegos consiste en --&gt;
&lt;!-- simplificar las físicas para gestionar fuerzas laterales y --&gt;
&lt;!-- logitudinales de forma separada. Las fuerzas logitudinales operan en --&gt;
&lt;!-- la dirección del cuerpo del coche. La logitudinal está --&gt;
&lt;!-- compuesta por la fuerza que aplican las ruedas, la de frenado, la --&gt;
&lt;!-- resistencia de giro y la resistencia del aire. Estas fuerzas juntas --&gt;
&lt;!-- controlan la aceleración y desaceleración del coche, así como su --&gt;
&lt;!-- velocidad. Por otro lado, las fuerzas laterales permiten al coche --&gt;
&lt;!-- girar. Estas fuerzas son causadas por la fricción lateral de las --&gt;
&lt;!-- ruedas. Tambien hay que tener en cuenta el momento angular del coche y --&gt;
&lt;!-- el esfuerzo de torsión causado por las fuerzas laterales. --&gt;
&lt;!--  --&gt;
&lt;!-- *********************************** --&gt;
&lt;!-- Físicas en movimientos rectilíneos --&gt;
&lt;!-- *********************************** --&gt;
&lt;!--  --&gt;
&lt;!-- El primer caso a considerar es el de un coche moviendose en línea --&gt;
&lt;!-- recta. La primera fuerza que entra en juego es la fuerza de tracción; --&gt;
&lt;!-- es decir, la que proporcina el motor a través de las ruedas. El motor --&gt;
&lt;!-- gira las ruedas hacia adelante(aplicando una fuerza de torsión), de --&gt;
&lt;!-- tal forma que las ruedas empujan hacia atrás contra la superficie de la --&gt;
&lt;!-- carretera y, en reacción, se genera una fuerza hacia adelante. Esto --&gt;
&lt;!-- implica que la fuerza de tracción es equivalente a la fuerza del --&gt;
&lt;!-- motor, que es controlada directamente por el usuario. --&gt;
&lt;!--  --&gt;
&lt;!-- Ftraccion = u * FMotor, --&gt;
&lt;!-- donde u es un vector unitario con la dirección del coche. --&gt;
&lt;!--  --&gt;
&lt;!-- Si esta fuera la única fuerza que influye en el movimiento, el coche --&gt;
&lt;!-- aceleraría hasta alcanzar una velocidad infinita. Aquí es donde entran --&gt;
&lt;!-- en juego las fuerzas de resistencia. La primera sería la resistencia --&gt;
&lt;!-- del aire. Esta fuerza es muy importante porque es proporcional al --&gt;
&lt;!-- cuadrado de la velocidad. Al conducir a altas velocidades ésta es la --&gt;
&lt;!-- mayor resitencia que encuentra el coche. --&gt;
&lt;!--  --&gt;
&lt;!-- Fdrag = - Cdrag * v * | v | --&gt;
&lt;!-- donde Cdrag es una constante de resistencia del aire, --&gt;
&lt;!-- v es el vector de velocidad y --&gt;
&lt;!-- | v | el módulo del vector. --&gt;
&lt;!--  --&gt;
&lt;!-- El módulo del vector velocidad es la velocidad a la que nos referimos --&gt;
&lt;!-- comunmente, expresada en km/h cuando hablamos de vehículos. --&gt;
&lt;!--  --&gt;
&lt;!-- speed = sqrt(v.x*v.x + v.y*v.y); --&gt;
&lt;!-- fdrag.x = - Cdrag * v.x * speed; --&gt;
&lt;!-- fdrag.y = - Cdrag * v.y * speed; --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- La siguiente resistencia que encontramos es la resistencia al giro. Es --&gt;
&lt;!-- causada por la fricción entre la goma del neumático y la superficie de --&gt;
&lt;!-- contacto debido al desplazamiento de las ruedas. --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- Frr = -Crr Frr = - Crr * v --&gt;
&lt;!-- donde Crr es una constante de rozamiento y --&gt;
&lt;!-- v el vector de velocidad. --&gt;
&lt;!--  --&gt;
&lt;!-- A bajas velocidades la resistencia al giro es la mayor resistencia que --&gt;
&lt;!-- encuentra el coche, mientras que a altas velocidades sería la --&gt;
&lt;!-- resistencia del aire. A 100km/h (aproximadamente 30m/s) son --&gt;
&lt;!-- equivalentes [http://www.gdconf.com/2000/library/homepage.htm]. Esto --&gt;
&lt;!-- significa que el coeficiente resistencia de giro debe ser --&gt;
&lt;!-- aproximadamente 30 veces el valor del coeficiente de resistencia --&gt;
&lt;!-- aerodinámica. --&gt;
&lt;!--  --&gt;
&lt;!-- La fuerza logitudinal total es la suma de estas tres fuerzas: --&gt;
&lt;!--  --&gt;
&lt;!-- Flong =   Ftraction + Fdrag   + Frr --&gt;
&lt;!--  --&gt;
&lt;!-- Hay que señalar que si se conduce en línea recta las fuerzas de --&gt;
&lt;!-- resistencia tiene sentido contrario al que toma el coche, oponiéndose --&gt;
&lt;!-- al movimiento. De esta forma, dentro de la fórmula tomarían valores --&gt;
&lt;!-- negativos, mientras que la fuerza de tracción toma valores --&gt;
&lt;!-- positivos. Cuando el coche se mueve a una velocidad constante las --&gt;
&lt;!-- fuerzas se encuentran en equilibrio, por lo que Flong es cero. --&gt;
&lt;!--  --&gt;
&lt;!-- La aceleración del coche(expresada en m/s) se calcula a partir de la --&gt;
&lt;!-- fuerza neta(Newtons) y la masa del coche (kg) usando la segunda ley de --&gt;
&lt;!-- Newton: --&gt;
&lt;!--  --&gt;
&lt;!-- a = F/Métrico --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- La velocidad del coche se calcula integrando la aceleración en el --&gt;
&lt;!-- tiempo: --&gt;
&lt;!--  --&gt;
&lt;!-- v = v0 + aceleración * dt --&gt;
&lt;!-- donde dt es el incremento de tiempo en segundos entre las --&gt;
&lt;!-- subsiguientes llamadas al motor de físicas. --&gt;
&lt;!--  --&gt;
&lt;!-- La posición del coche se calcula integrando la velocidad a lo largo --&gt;
&lt;!-- del tiempo: --&gt;
&lt;!--  --&gt;
&lt;!-- p = p + dt * v --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- Con estas tres fuerzas se puede simular la aceleración del coche de --&gt;
&lt;!-- una forma bastante precisa. Juntas también determinan la velocidad --&gt;
&lt;!-- máxima del coche para una potencia de motor dada. No hay necesidad de --&gt;
&lt;!-- definir una velocidad máxima en ninguna parte del código ya que es --&gt;
&lt;!-- algo que viene dado por estas ecuaciones. Esto es así debido a que las --&gt;
&lt;!-- ecuaciones interaccionan entre ellas. Por ejemplo, si la tracción --&gt;
&lt;!-- sobrepasa a las resistencias dentro de la fórmula de la fuerza --&gt;
&lt;!-- longitudinal, el coche acelerará. La velocidad del coche se --&gt;
&lt;!-- incrementará, lo que incrementará las resistencias. La fuerza neta --&gt;
&lt;!-- decrementará y por tanto la aceleración. En algún punto las --&gt;
&lt;!-- resistencias y la fuerza de tracción se igualarán, cancelándose --&gt;
&lt;!-- mútuamente, lo que hará que el coche alcance la velocidad punta para --&gt;
&lt;!-- esa potencia de motor determinada. --&gt;
&lt;!-- .. image:: http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/ctgraph.jpg --&gt;
&lt;!-- :align: center --&gt;
&lt;!-- :alt: Distribución del peso del coche sobre las ruedas --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- En el diagrama el eje de las x denota la velocidad del coche en metros --&gt;
&lt;!-- por segundo y el eje de las y el valor de las fuerzas. La fuerza de --&gt;
&lt;!-- tracción( azul oscuro) se configura a un valor aleatorio, ya que no --&gt;
&lt;!-- depende de la velocidad del coche. La resistencia de giro (línea --&gt;
&lt;!-- morada) es una función lineal de la velocidad y la resistencia --&gt;
&lt;!-- aerodinámica(línea amarilla) es una función cuadrática de la --&gt;
&lt;!-- velocidad. A velocidades bajas la resistencia de giro sobrepasa a la --&gt;
&lt;!-- resistencia del aire. A 30m/s las dos funciones se cruzan. A --&gt;
&lt;!-- velocidades altas la resistencia del aire es la mayor de las --&gt;
&lt;!-- resistencias. La suma de las dos resistencias se muestra en la línea --&gt;
&lt;!-- azul claro. A 37m/s la suma de las resitencias iguala la línea --&gt;
&lt;!-- horizontal (potencia del motor). Esta es la velocidad punta para ese --&gt;
&lt;!-- valor particular de la potencia del motor. --&gt;
&lt;!--  --&gt;
&lt;!-- ******************* --&gt;
&lt;!-- Constantes mágicas --&gt;
&lt;!-- ******************* --&gt;
&lt;!--  --&gt;
&lt;!-- Hasta ahora, hemos introducido dos constantes mágicas, Cdrag y Crr. Si --&gt;
&lt;!-- no se persigue conseguir realismo en la simulación física, los valores --&gt;
&lt;!-- que hemos dado a estas constantes son suficientemente buenos para tu --&gt;
&lt;!-- juego. Por ejemplo, en un juego arcade se podría querer que el coche --&gt;
&lt;!-- acelerase mas rápido que el la vida real. Sin embargo, si se busca --&gt;
&lt;!-- el realismo, es importante dar a estas constantes valores precisos. --&gt;
&lt;!--  --&gt;
&lt;!-- La resistencia del aire está modelada, aproximadamente, por la --&gt;
&lt;!-- siguiente fórmula [Fluid Mechanics by Landau and Lifshitz, [Beckham] --&gt;
&lt;!-- chapter 6, [Zuvich]] --&gt;
&lt;!--  --&gt;
&lt;!-- Fdrag =  0.5 * Cd * A * rho * v2 --&gt;
&lt;!--  --&gt;
&lt;!-- donde  Cd = coeficiente de fricción --&gt;
&lt;!-- A es el area frontal del coche --&gt;
&lt;!-- rho (Greek symbol)= densidad del aire. --&gt;
&lt;!-- v = velocidad del coche --&gt;
&lt;!--  --&gt;
&lt;!-- La densidad del aire(rho) es 1.29kg/m³, el area frontal --&gt;
&lt;!-- aproximadamente 2.2m², Cd depende de la forma del coche y se determina --&gt;
&lt;!-- con test en tuneles de viento. Para un Corvette: 0.3. Esto nos da para --&gt;
&lt;!-- Cdrag: --&gt;
&lt;!--  --&gt;
&lt;!-- Cdrag = 0.5 * 0.3 * 2.2 *1.29 = 0.4257 --&gt;
&lt;!--  --&gt;
&lt;!-- Crr es aproximadamente 30 veces Cdrag, lo que nos da: --&gt;
&lt;!--  --&gt;
&lt;!-- Crr = 30 * 0.4257 = 12.8 --&gt;
&lt;!--  --&gt;
&lt;!-- Este último valor no es 100% correcto. --&gt;
&lt;!--  --&gt;
&lt;!-- ********** --&gt;
&lt;!-- Frenado --&gt;
&lt;!-- ********** --&gt;
&lt;!--  --&gt;
&lt;!-- Cuando el coche frena, la fuerza de tracción se ve reemplazada por la --&gt;
&lt;!-- fuerza de frenado, la cuál está orientada en sentido opuesto al del --&gt;
&lt;!-- movimiento. La fuerza longitudinal total es el vector que resulta de --&gt;
&lt;!-- la suma de las tres fuerzas: --&gt;
&lt;!--  --&gt;
&lt;!-- Flong =   Fbraking + Fdrag   + Frr --&gt;
&lt;!--  --&gt;
&lt;!-- La fuerza de frenado de forma simplificada es igual a: --&gt;
&lt;!--  --&gt;
&lt;!-- Fbraking = -u * Cbraking --&gt;
&lt;!--  --&gt;
&lt;!-- u es el vector unitario de movimiento y --&gt;
&lt;!-- Cbraking una constante de frenado. --&gt;
&lt;!--  --&gt;
&lt;!-- En esta fórmula la fuerza de frenado es constante, de modo que hay que --&gt;
&lt;!-- dejar de aplicarla cuando la velocidad del coche llegue a cero, para --&gt;
&lt;!-- que el coche no empiece a avanzar en sentido contrario al del --&gt;
&lt;!-- movimiento. --&gt;
&lt;!--  --&gt;
&lt;!-- ************************ --&gt;
&lt;!-- Transferencia de peso --&gt;
&lt;!-- ************************ --&gt;
&lt;!--  --&gt;
&lt;!-- Un efecto importante cuando se acelera o frena es el efecto de la --&gt;
&lt;!-- transferencia dinámica de peso. Cuando se frena el coche baja el morro --&gt;
&lt;!-- hacia adelante. Durante la aceleración, el coche se inclina hacia --&gt;
&lt;!-- atrás. Esto es debido a que el centro de gravedad el coche cambia. El --&gt;
&lt;!-- efecto de esto es que el peso sobre las ruedas traseras aumenta --&gt;
&lt;!-- durante la aceleración, mientras que las ruedas delanteras deben --&gt;
&lt;!-- soportar menos peso. --&gt;
&lt;!--  --&gt;
&lt;!-- El efecto de la transferencia de peso es importante por dos --&gt;
&lt;!-- razones. La primera es que el efecto visual del coche "cabeceando" en --&gt;
&lt;!-- respuesta a las acciones del usuario aporta gran realismo. De repente --&gt;
&lt;!-- el usuario se siente mas inmerso en la simulación. --&gt;
&lt;!--  --&gt;
&lt;!-- Por otra parte, la distribución de peso afecta dramáticamente a la --&gt;
&lt;!-- tracción máxima por rueda. Esto es debido a que el límite de fricción --&gt;
&lt;!-- es proporcional a la carga en esa rueda: --&gt;
&lt;!--  --&gt;
&lt;!-- Fmax = mu * W --&gt;
&lt;!--  --&gt;
&lt;!-- donde mu es el coeficiente de fricción en el neumático y --&gt;
&lt;!-- W es el peso del coche. --&gt;
&lt;!--  --&gt;
&lt;!-- Para neumáticos de calle m utoma el valor de 1.0, mientras que para --&gt;
&lt;!-- neumáticos de carrera puede tomar valores superiores a 1.5. --&gt;
&lt;!--  --&gt;
&lt;!-- Para vehiculos estacionados el peso total del coche (W = M*g) se --&gt;
&lt;!-- distribuye sobre las ruedas delanteras y traseras de acuerdo a la --&gt;
&lt;!-- distancia entre la parte el eje delantero y trasero al centro de masa: --&gt;
&lt;!--  --&gt;
&lt;!-- Wdelantero = (c/L)*W --&gt;
&lt;!-- Wtrasero   = (b/L)*W --&gt;
&lt;!-- donde b y c son la distancia al centro de gravedad de los ejes delanteros y traseros y L es la base de las ruedas. --&gt;
&lt;!--  --&gt;
&lt;!-- .. image:: transferencia-peso.jpg --&gt;
&lt;!-- :align: center --&gt;
&lt;!-- :alt: Distribución del peso del coche sobre las ruedas --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- Si el coche acelera o desacelera en un factor a, el peso frontal y --&gt;
&lt;!-- trasero se calculan como sigue: --&gt;
&lt;!--  --&gt;
&lt;!-- Wf = (c/L)*W - (h/L)*M*a --&gt;
&lt;!-- Wr = (b/L)*W + (h/L)*M*a --&gt;
&lt;!-- donde h es la altura del centro de gravedad, M es la masa del coche y a la aceleración --&gt;
&lt;!--  --&gt;
&lt;!-- Para simplificar las fórmulas, se puede asumir una distribución --&gt;
&lt;!-- estática de 50-50 sobre la parte frontal y trasera. En otras palabras, --&gt;
&lt;!-- asumimos b = c = L/2. En ese caso, Wf = 0.5W -(h/L) * M * a y Wr = --&gt;
&lt;!-- 0.5*W + (h/L)*M*a. --&gt;
&lt;!--  --&gt;
&lt;!-- ***************** --&gt;
&lt;!-- Fuerza del motor --&gt;
&lt;!-- ***************** --&gt;
&lt;!--  --&gt;
&lt;!-- Hasta ahora hemos hecho una pequeña simplificación diciendo que el --&gt;
&lt;!-- motor da una cantidad de fuerza. El motor aporta par motor o momento --&gt;
&lt;!-- torsor. El par motor es fuerza por distancia. Si aplicas una fuerza de --&gt;
&lt;!-- 10 Newton 0.3 metros en el eje de rotación, obtienes 10*0.3 = 3N.m ( --&gt;
&lt;!-- Newton metro). Es lo mismo cuando aplicas un par motor de 1 Newton a --&gt;
&lt;!-- 3 metros del eje. En ambos casos el momento es el mismo. --&gt;
&lt;!--  --&gt;
&lt;!-- El momento torsor que puede entregar el motor depende de la velocidad --&gt;
&lt;!-- a la cuál este gira, típicamente expresado en rpm. La relación momento --&gt;
&lt;!-- torsor/rpm no es lineal, pero se representa normalmente como una curva --&gt;
&lt;!-- llamada función del momento torsor (La curva exacta de cada motor --&gt;
&lt;!-- viene determinada por los test a los que son sometidos estos --&gt;
&lt;!-- motores). Aquí vemos un ejemplo para el motor de un Corvette de 1997 a --&gt;
&lt;!-- 2000: el LS1(5.7 litros V8) --&gt;
&lt;!-- .. image:: http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/cttorq.gif --&gt;
&lt;!-- :align: center --&gt;
&lt;!-- :alt: Curva de potencia/par motor del Corvette LS1 --&gt;
&lt;!-- Nota que la curva del par motor alcanza el máximo alrededor de las --&gt;
&lt;!-- 4400 rpm con un par motor de 475 N.m y la curva de los caballos de --&gt;
&lt;!-- potencia alcanza el máximo a 5600rpm a 345 caballos de potencia( 257 --&gt;
&lt;!-- kW). Las curvas sólo están definidas en el rango de los 1000 a los --&gt;
&lt;!-- 6000 rpm debido a que es el rango operativo del motor. Cualquier valor --&gt;
&lt;!-- inferior hará que el motor se detenga. Cualquier valor superior lo --&gt;
&lt;!-- dañaría. --&gt;
&lt;!--  --&gt;
&lt;!-- Los valores mencionados anteriormente hacen referencia al máximo par --&gt;
&lt;!-- motor que puede entregar el motor paraa unas rpm dadas. El par real que --&gt;
&lt;!-- entrega el motor depende de la posición del acelerador y es una --&gt;
&lt;!-- fracción entre 0 y 1 de este máximo. --&gt;
&lt;!--  --&gt;
&lt;!-- Nuestro interés se centra principalmente en la curva del par, aunque --&gt;
&lt;!-- algunas personas encuentran interesante tambien la de potencia. A --&gt;
&lt;!-- continuación se puede ver la misma gráfica en unidades del SMI. --&gt;
&lt;!--  --&gt;
&lt;!-- .. image:: http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/cttorqsi.gif --&gt;
&lt;!-- :align: center --&gt;
&lt;!-- :alt: Curva de potencia/par motor del Corvette LS1 --&gt;
&lt;!--  --&gt;
&lt;!-- Ahora, el par de torsión desde el motor (es decir, en el cigüeñal) se --&gt;
&lt;!-- convierte a través del engranaje diferencial y antes de que sea --&gt;
&lt;!-- aplicada a las ruedas traseras. El engranaje multiplica el par de --&gt;
&lt;!-- torsión por un factor que depende de las relaciones de transmisión --&gt;
&lt;!-- (las marchas). --&gt;
&lt;!--  --&gt;
&lt;!-- Desafortunadamente se pierde energía en el proceso. Hasta un --&gt;
&lt;!-- 30% se puede perder en forma de calor. Esto da una eficiencia de --&gt;
&lt;!-- transmisión del 70%, aunque el valor concreto en cada coche varía. --&gt;
&lt;!--  --&gt;
&lt;!-- El par motor se convierte en una fuerza a través del giro de la rueda --&gt;
&lt;!-- sobre la carretera, dividido por el radio de la rueda( Fuerza = par --&gt;
&lt;!-- motor / distancia) --&gt;
&lt;!--  --&gt;
&lt;!-- A continuación podemos ver la formula que convierte par motor en --&gt;
&lt;!-- fuerza de "conducción": la fuerza longitudinal que ejercen las dos --&gt;
&lt;!-- ruedas traseras sobre la carretera. --&gt;
&lt;!--  --&gt;
&lt;!-- Fdrive = u * Tengine * xg * xd * n / Rw --&gt;
&lt;!-- donde u es el vector unitario que refleja la orientación del coche --&gt;
&lt;!-- Tengine es el par motor en rpm --&gt;
&lt;!-- xg es la relación de las marchas --&gt;
&lt;!-- xd es el coeficiente diferencial --&gt;
&lt;!-- n es la eficiencia de la transmisión --&gt;
&lt;!-- Rw es el radio de la rueda. --&gt;
&lt;!--  --&gt;
&lt;!-- ************************* --&gt;
&lt;!-- Relación de transmisión --&gt;
&lt;!-- ************************* --&gt;
&lt;!--  --&gt;
&lt;!-- Los siguientes ratios se aplican al Corvette C5 hardtop: --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- First gear         g1          2.66 --&gt;
&lt;!-- Second gear                g2          1.78 --&gt;
&lt;!-- Third gear         g3          1.30 --&gt;
&lt;!-- Fourth gear                g4          1.0 --&gt;
&lt;!-- Fifth gear         g5          0.74 --&gt;
&lt;!-- Sixth gear         g6          0.50 --&gt;
&lt;!-- Reverse                gR          2.90 --&gt;
&lt;!-- Differential ratio         xd          3.42 --&gt;
&lt;!--  --&gt;
&lt;!-- El máximo par motor es 475 N.m a 4400 rpm, la masa = 1439 kg(ignorando --&gt;
&lt;!-- la del conductor por ahora). En la primera marcha, con el máximo par --&gt;
&lt;!-- nos da 475*2.66*3.42*0.7/0.33 = 9166 N de fuerza. Esto haría que el --&gt;
&lt;!-- coche acelerase los 1439 kg del coche a 6.4 m/s² que es igual a 0.65 --&gt;
&lt;!-- g. --&gt;
&lt;!--  --&gt;
&lt;!-- La combinación de las marchas y el diferencial actua como un --&gt;
&lt;!-- multiplicador del par motor en el cigueñal sobre el par de torsión que --&gt;
&lt;!-- se aplica a las ruedas. Por ejemplo, el Corvette en la primera marcha --&gt;
&lt;!-- tiene un multiplicador de 2,66 * 3,42 = 9,1. Esto significa que cada --&gt;
&lt;!-- metro Newton del par motor en el cigüeñal resulta en 9,1 Nm de par --&gt;
&lt;!-- motor en el eje trasero. Considerando un 30% de perdida de energía, --&gt;
&lt;!-- esto deja 6.4 N.m. Dividiendo esto por el radio de las ruedas --&gt;
&lt;!-- obtenemos la fuerza ejercida por las ruedas. Suponiendo un radio de 34 --&gt;
&lt;!-- cm, tenemos 6.4 N.m/0.34m = 2.2N de fuerza por N.m de par motor. Sin --&gt;
&lt;!-- embargo, la ganancia obtenida como par motor tiene como contrapunto --&gt;
&lt;!-- velocidad angular. Se intercambia fuerza por velocidad. Por cada rpm --&gt;
&lt;!-- de las ruedas, el motor debe dar 9.1 rpm. La velocidad de rotación de --&gt;
&lt;!-- cad rueda es directamente proporcional a la velocidad del coche. Una --&gt;
&lt;!-- rpm está 1/60th de una revolución por segundo. Cada revolución hace --&gt;
&lt;!-- avanzar a la rueda 2 pi * R hacia adelante; es decir, 2 * 3.14 * 0.34 --&gt;
&lt;!-- = 2.14 m. De esta forma, 4400 rpm en la primera marcha equivalen a 483 --&gt;
&lt;!-- rpm en las ruedas, lo que son 8.05 rotaciones por segundo = 17.2 m/s ( --&gt;
&lt;!-- alrededor de 62 km/h). --&gt;
&lt;!--  --&gt;
&lt;!-- En marchas bajas el ratio de las marchas es alto, de modo que obtienes --&gt;
&lt;!-- mucho par motor pero poca velocidad. En velocidades altas, obtienes --&gt;
&lt;!-- mas velocidad que par motor. Esto se puede observar en las siguietne --&gt;
&lt;!-- gráfica. --&gt;
&lt;!--  --&gt;
&lt;!-- .. image::  http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/ctgrcrvs.gif --&gt;
&lt;!-- :align: center --&gt;
&lt;!-- :alt: Distribución del peso del coche sobre las ruedas --&gt;
&lt;!--  --&gt;
&lt;!-- La gráfica asume una eficiencia del 100%. El par motor se representa --&gt;
&lt;!-- como la línea negra. --&gt;
&lt;!--  --&gt;
&lt;!-- *************************************** --&gt;
&lt;!-- Aceleración (Drive wheel acceleration) --&gt;
&lt;!-- *************************************** --&gt;
&lt;!--  --&gt;
&lt;!-- El par motor que obtenemos para una rpm dada es el máximo par motor a --&gt;
&lt;!-- esa rpm. Cuanto par motor se aplica realmente a las ruedas depende de --&gt;
&lt;!-- la posición del acelerador. Esta posición se determina por las --&gt;
&lt;!-- entradas del usuario (a través del pedal) y varía de 0 a 100%. --&gt;
&lt;!--  --&gt;
&lt;!-- ********************************** --&gt;
&lt;!-- Como obtener el valor de los rpm --&gt;
&lt;!-- ********************************** --&gt;
&lt;!--  --&gt;
&lt;!-- Se necesita calcular el valor máximo del par motor y a partir de ese --&gt;
&lt;!-- valor obtener el valor real del par motor aplicado; es decir, hay que --&gt;
&lt;!-- conocer cuán rápido gira el cigüeñal. --&gt;
&lt;!--  --&gt;
&lt;!-- Una forma en que se puede calcular este valor es obteniendo la --&gt;
&lt;!-- velocidad de rotación de las ruedas. Despues de todo, si el motor no --&gt;
&lt;!-- está desembragado, el cigueñal y las ruedas estarán físicamente --&gt;
&lt;!-- conectadas a través de la transmisión. Conociendo los rpm del motor --&gt;
&lt;!-- podemos conocer la velocidad de rotación de las ruedas y viceversa. --&gt;
&lt;!--  --&gt;
&lt;!-- rpm = Ratio de giro de las ruedas * marcha * ratio  del diferencial * (60 / 2 pi) --&gt;
&lt;!--  --&gt;
&lt;!-- El multiplicando 60/2 * pi es un factor de conversión de rad/s a --&gt;
&lt;!-- rpm. Hay 60 segundos en un minuto y 2pi radianes por revolución. De --&gt;
&lt;!-- acuerdo a esta fórmula el cigueñal gira más rápido que las --&gt;
&lt;!-- ruedas. Supongamos que está girando a 17 rad/s: --&gt;
&lt;!--  --&gt;
&lt;!-- Las ruedas giran a 17 rad /s.  El ratio de la primera marcha es --&gt;
&lt;!-- 2.66, el ratio differential es 3.42 por lo que el cigueñal rota a --&gt;
&lt;!-- 153 rad/s.  Eso significa que el motor gira a =&gt; 153*60 = 9170 --&gt;
&lt;!-- rad/minute = 9170/2 pi = 1460 rpm --&gt;
&lt;!--  --&gt;
&lt;!-- Debido a que la curva del par motor no está definido por debajo de --&gt;
&lt;!-- ciertas rpm, hay que hacer que el gestor de físicas contemple caso: --&gt;
&lt;!--  --&gt;
&lt;!-- if( rpm &lt; 1000 ) --&gt;
&lt;!-- rpm = 1000; --&gt;
&lt;!--  --&gt;
&lt;!-- Esto es necesario para poder modelar el motor del coche cuando éste --&gt;
&lt;!-- esté parado. Ya que calculamos los rpm a partir de las rpm de las --&gt;
&lt;!-- ruedas y éstas estarán paradas, los rpm serán 0. --&gt;
&lt;!--  --&gt;
&lt;!-- Hay dos formas de obtener la velocidad de rotación de las ruedas. La --&gt;
&lt;!-- primera es un truco y la segunda involucra hacer un seguimiento a lo --&gt;
&lt;!-- largo del tiempo de varias variables. --&gt;
&lt;!--  --&gt;
&lt;!-- La forma más fácil es pretender que la rueda está girando y derivar la --&gt;
&lt;!-- velocidad de rotación de la velocidad del coche y el radio de la --&gt;
&lt;!-- rueda. Por ejemplo, digamos que el coche se mueve a 20 km/h = 20,000 m --&gt;
&lt;!-- / 3600 s = 5.6 m/s.  el radio de las ruedas es 0.33 m, por lo que la --&gt;
&lt;!-- velocidad angular de las ruedas es 5.6/0.33 = 17 rad/s --&gt;
&lt;!--  --&gt;
&lt;!-- Usando las formulas anteriores para obtener rpm, obtenemos que el --&gt;
&lt;!-- valor es 1460 rpm, de lo que podemos calcular el par motor a partir de --&gt;
&lt;!-- la curva del par motor. --&gt;
&lt;!--  --&gt;
&lt;!-- Una forma más avanzada es hacer que la simulación realice un --&gt;
&lt;!-- seguimiento de la velocidad de rotación de la rueda y de cómo cambia --&gt;
&lt;!-- con el tiempo, debido al par motor que actúan sobre dichas ruedas. En --&gt;
&lt;!-- otras palabras, calculamos la velocidad de rotación mediante la --&gt;
&lt;!-- integración de la aceleración rotacional en el tiempo. La aceleración --&gt;
&lt;!-- rotacional en cualquier instante particular depende de la suma de --&gt;
&lt;!-- todos los pares de torsión en el eje y es igual al par neto dividido --&gt;
&lt;!-- por la inercia del eje (al igual que la aceleración es la fuerza --&gt;
&lt;!-- dividida por la masa). El par neto es el par motor que vimos antes, --&gt;
&lt;!-- menos los pares de rozamiento que lo contrarrestan (par de frenado si --&gt;
&lt;!-- se está frenado y par de tracción a partir del contacto con la --&gt;
&lt;!-- superficie de la carretera). --&gt;
&lt;!--  --&gt;
&lt;!-- *********************************************** --&gt;
&lt;!-- Relación de deslizamiento y fuerza de tracción --&gt;
&lt;!-- *********************************************** --&gt;
&lt;!--  --&gt;
&lt;!-- Calcular la velocidad angular de las ruedas a partir de la velocidad --&gt;
&lt;!-- del coche sólo es posible si la rueda está girando, es decir, no hay --&gt;
&lt;!-- desplazamiento lateral entre el neumatico y la carretera. Esto es --&gt;
&lt;!-- cierto para las ruedas delanteras, pero para las ruedas motrices esto --&gt;
&lt;!-- no se suele cumplir.  Por ejemplo, cuando estas derrapan no se produce --&gt;
&lt;!-- transferencia de energia para hacer que el coche avance. --&gt;
&lt;!--  --&gt;
&lt;!-- En una situación típica en la que el coche se desplaza a una velocidad --&gt;
&lt;!-- constante, las ruedas traseras giran levemente más rápido que las --&gt;
&lt;!-- ruedas delanteras. Dado que las ruedas delanteras no derrapan, se --&gt;
&lt;!-- puede calcular su velocidad angular con sólo dividir la velocidad del --&gt;
&lt;!-- coche por 2 pi veces el radio de la rueda. Sin embargo, dado que las --&gt;
&lt;!-- ruedas traseras giran más rápido, eso significa que la superficie del --&gt;
&lt;!-- neumático se estará deslizando contra respecto a la superficie de la --&gt;
&lt;!-- carretera. Este deslizamiento causa una fuerza de fricción en la --&gt;
&lt;!-- dirección opuesta a la de deslizamiento. Por tanto, la fuerza de --&gt;
&lt;!-- fricción estará apuntando a la parte delantera del coche. De hecho, --&gt;
&lt;!-- esta reacción a la rueda que patina es lo que empuja al coche. Esta --&gt;
&lt;!-- fuerza de fricción se conoce como tracción o fuerza longtitudinal. La --&gt;
&lt;!-- tracción depende de la cantidad de deslizamiento. La forma --&gt;
&lt;!-- estandarizada de expresar la cantidad de deslizamiento es como la --&gt;
&lt;!-- denominada relación de deslizamiento: --&gt;
&lt;!--  --&gt;
&lt;!-- .. figure:: http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/cteq_sr.gif --&gt;
&lt;!-- :align: center --&gt;
&lt;!-- :alt: Relación de desplazamiento --&gt;
&lt;!--  --&gt;
&lt;!-- Donde: --&gt;
&lt;!-- Ww (omega) es la velocidad angular de las ruedas (in rad/s) --&gt;
&lt;!-- Rw es el radio de las ruedas ( en metros) --&gt;
&lt;!-- vlong es la velocidad del coche; la velocidad longitu --&gt;
&lt;!-- dinal. --&gt;
&lt;!--  --&gt;
&lt;!-- Nota: hay una serie de definiciones ligeramente diferentes de relación --&gt;
&lt;!-- de deslizamiento en uso. Esta definición particular también funciona --&gt;
&lt;!-- para los coches de tracción delantera.  La relación de deslizamiento --&gt;
&lt;!-- es cero para una rueda que no gira. Para un frenazo del coche con las --&gt;
&lt;!-- ruedas bloqueadas la relación de deslizamiento es -1, y un coche --&gt;
&lt;!-- acelerando tiene una relación de deslizamiento positivo, pudiendo --&gt;
&lt;!-- alcanzar valores mayores a 1 cuando existen una gran cantidad de --&gt;
&lt;!-- deslizamiento. --&gt;
&lt;!--  --&gt;
&lt;!-- La relación entre la fuerza longitudinal y el ratio de desplazamiento --&gt;
&lt;!-- puede ser descrita por una curva como la del siguiente gráfico: --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/ctsrcurve.gif --&gt;
&lt;!--  --&gt;
&lt;!-- La gráfica muestra cómo la fuerza es cero si el ratio de deslizamiento --&gt;
&lt;!-- es 0, mientras que ésta alcanza su máximo para un valor del ratio de --&gt;
&lt;!-- desplazamiento del 6%, donde la fuerza longitudinal supera levemente --&gt;
&lt;!-- la carga de las ruedas. La curva exacta puede variar dependiendo del --&gt;
&lt;!-- tipo de neumático, de la superficie, la temperatura, etcetera. Esto --&gt;
&lt;!-- significa que las ruedas obtienen un mejor agarre con un poco de --&gt;
&lt;!-- deslizamiento. Mas hallá de ese óptimo, el agarre disminuye. Por esa --&gt;
&lt;!-- razón un derrape no da mayor aceleración. Habría tanto deslizamiento --&gt;
&lt;!-- que la fuerza longitudinal estaría por debajo de su valor máximo. La --&gt;
&lt;!-- disminución del desplazamiento da lugar a una mayor tracción y una --&gt;
&lt;!-- mejor aceleración. --&gt;
&lt;!--  --&gt;
&lt;!-- La fuerza longitudinal es directamente proporcional a la carga de las --&gt;
&lt;!-- ruedas, como vimos cuando se discutió la transferencia de carga. Por --&gt;
&lt;!-- esta razón en lugar de dibujar una gráfica para cada valor particular --&gt;
&lt;!-- de la carga, podemos crear una curva normalizada dividiendo la fuerza --&gt;
&lt;!-- por la carga. --&gt;
&lt;!--  --&gt;
&lt;!-- Para obtener la fuerza longitudinal a partir de la fuerza logitudinal --&gt;
&lt;!-- normalizada debemos multiplicarla por la carga: --&gt;
&lt;!--  --&gt;
&lt;!-- Flong = F(n, long) * Fz --&gt;
&lt;!-- donde Fn,long es la fuerza longitudinal normalizada para una relación de desplazamiento dada y Fz es la carga del neumático. --&gt;
&lt;!--  --&gt;
&lt;!-- Para simplificar la simulación se puede aproximar a la siguiente fórmula: --&gt;
&lt;!--  --&gt;
&lt;!-- Flong = Ct * slip ratio --&gt;
&lt;!--  --&gt;
&lt;!-- donde Ct es la constante de tracción; es decir, la pendiente de la curva de --&gt;
&lt;!-- relación de desplazamiento en el origen.  Es interesante limitar --&gt;
&lt;!-- la fuerza a un valor máximo para que no sobrepase dicho valor --&gt;
&lt;!-- cuando la curva de desplazamiento sobrepase el valor máximo. La --&gt;
&lt;!-- siguiente gráfica representa dicha curva: --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- *********************************** --&gt;
&lt;!-- Par motor sobre el eje de tracción --&gt;
&lt;!-- *********************************** --&gt;
&lt;!--  --&gt;
&lt;!-- Para recapitular, la fuerza de tracción es la fuerza de fricción que --&gt;
&lt;!-- la superficie de la carretera aplica sobre la superficie de las --&gt;
&lt;!-- ruedas. Obviamente, esta fuerza es causada por el par motor que aplica --&gt;
&lt;!-- el motor sobre los ejes de cada rueda. --&gt;
&lt;!--  --&gt;
&lt;!-- Par motor = Ftracción * Rruedas --&gt;
&lt;!--  --&gt;
&lt;!-- Este par motor se opone al momento de torsión entregado por el motor a --&gt;
&lt;!-- cada rueda(que hemos llamado par motor de "conducción"). Si se frena, --&gt;
&lt;!-- tambien se causará momento de torsión. Para el freno, se va a suponer --&gt;
&lt;!-- que se entrega un par motor constante en la direccion opuesta a la --&gt;
&lt;!-- rotación de las ruedas. Hay que tener en cuenta esto para poder frenar --&gt;
&lt;!-- cuando se va marcha atrás. El siguiente diagrama ilustra estos --&gt;
&lt;!-- conceptos para un coche acelerando. El par motor es amplificado por --&gt;
&lt;!-- las marchas y el diferencial, proporcionando par a las ruedas --&gt;
&lt;!-- traseras. La velocidad angular de las ruedas es suficientemente alta --&gt;
&lt;!-- como para provocar deslizamiento entre la superficie del neumático y --&gt;
&lt;!-- la carretera, lo que puede ser expresado como un ratio de --&gt;
&lt;!-- deslizamiento positivo.  Esto resulta en una fuerza de fricción --&gt;
&lt;!-- reactiva, conocida como fuerza de tracción, que es lo que empuja el --&gt;
&lt;!-- coche hacia adelante. La fuerza de tracción tambien se traduce en un --&gt;
&lt;!-- par de tracción en las ruedas traseras que se opone al par de --&gt;
&lt;!-- impulso. En este caso, el par neto sigue siendo positivo y dará lugar --&gt;
&lt;!-- a una aceleración de la velocidad de rotación de las ruedas --&gt;
&lt;!-- traseras. Esto incrementará los rpm y el ratio de deslizamiento. --&gt;
&lt;!--  --&gt;
&lt;!-- .. image:: http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/tc_torques.png --&gt;
&lt;!-- :align: center --&gt;
&lt;!-- :alt: Distribución del peso del coche sobre las ruedas --&gt;
&lt;!--  --&gt;
&lt;!-- El par neto en el eje trasero es la suma de los siguientes pares: --&gt;
&lt;!--  --&gt;
&lt;!-- ParMotorTotal = Par motor + par motor en ambas ruedas + par motor de frenado --&gt;
&lt;!--  --&gt;
&lt;!-- Hay que recordar que los momentos de torsión son magnitudes con signo, --&gt;
&lt;!-- el momento de impulso normalmente tendrá signo opuesto a los de --&gt;
&lt;!-- tracción y de frenado. Si el conductor no frena, el momento de frenado --&gt;
&lt;!-- es cero. --&gt;
&lt;!--  --&gt;
&lt;!-- El par total genera una velocidad angular sobre las ruedas que tienen --&gt;
&lt;!-- tracción, tal y como una fuerza aplicada sobre una masa hace que dicha --&gt;
&lt;!-- masa acelere: --&gt;
&lt;!--  --&gt;
&lt;!-- Aangular = Par motor total / inercias de las ruedas de tracción. --&gt;
&lt;!--  --&gt;
&lt;!-- La inercia de un cilindro sólido alrededor de un eje puede ser --&gt;
&lt;!-- calculado con la siguiente fórmula: --&gt;
&lt;!--  --&gt;
&lt;!-- InerciaCilindro = Masa * Radio^2 / 2 --&gt;
&lt;!--  --&gt;
&lt;!-- Así que para una rueda de 75 kg con un radio de 33 cm su inercia es de --&gt;
&lt;!-- 75 * 0.33 * 0.33 / 2 = 4.1 kg.m2. Multiplicando por dos se obtiene la --&gt;
&lt;!-- inercia total de las dos ruedas del eje trasero, para mayor precisión --&gt;
&lt;!-- habría que añadir la inercia del propio eje, la inercia de los --&gt;
&lt;!-- engranajes y la del motor. --&gt;
&lt;!--  --&gt;
&lt;!-- Una aceleración angular positiva incrementará la velocidad angular de --&gt;
&lt;!-- las ruedas traseras en el tiempo. Como la velicidad del coche depende --&gt;
&lt;!-- de la aceleración lineal, podemos simular esto realizando integración --&gt;
&lt;!-- lineal en cada simulación que realice nuestro gestor de físicas: --&gt;
&lt;!--  --&gt;
&lt;!-- velocidad angular de las ruedas traseras += velocidad angular de las ruedas traseras * time step --&gt;
&lt;!--  --&gt;
&lt;!-- Donde time step es la cantidad de tiempo entre llamadas al simulador --&gt;
&lt;!-- físico. De esta forma se puede determinar cuán rápido están girando --&gt;
&lt;!-- las ruedas de tracción y por lo tanto las rpm del motor. --&gt;
&lt;!--  --&gt;
&lt;!-- *********************** --&gt;
&lt;!-- El huevo y la gallina --&gt;
&lt;!-- *********************** --&gt;
&lt;!--  --&gt;
&lt;!-- Algunos lectores podrían estar confusos en este punto. Necesitamos los --&gt;
&lt;!-- rpm para calcular el par motor, pero el número de revoluciones depende --&gt;
&lt;!-- de la velocidad de rotación de las ruedas traseras, que a su vez --&gt;
&lt;!-- depende del par motor. Sin duda, esta es una definición circular. --&gt;
&lt;!--  --&gt;
&lt;!-- Este es un ejemplo de una ecuación diferencial: tenemos ecuaciones --&gt;
&lt;!-- para las distintas variables que dependen mutuamente la una de la --&gt;
&lt;!-- otra. Pero ya hemos visto un ejemplo más de esto antes: la resistencia --&gt;
&lt;!-- del aire depende de la velocidad, sin embargo, la velocidad depende de --&gt;
&lt;!-- la resistencia del aire, ya que influye en la aceleración. --&gt;
&lt;!--  --&gt;
&lt;!-- Para resolver ecuaciones diferenciales en los programas de ordenador --&gt;
&lt;!-- utilizamos la técnica de integración numérica: si conocemos todos los --&gt;
&lt;!-- valores en el tiempo t, podemos trabajar los valores en el tiempo t + --&gt;
&lt;!-- delta. En otras palabras, en lugar de tratar de resolver estas --&gt;
&lt;!-- ecuaciones mutuamente dependientes, tomamos instantáneas en tiempo y --&gt;
&lt;!-- resolvemos las ecuaciones para estos valores. Utilizamos los valores --&gt;
&lt;!-- de la iteración anterior para calcular los de la siguiente. Si el paso --&gt;
&lt;!-- de tiempo es lo suficientemente pequeño, este método funcionará --&gt;
&lt;!-- correctamente. --&gt;
&lt;!--  --&gt;
&lt;!-- Existe multitud de teoría relacionada con el cálculo de ecuaciones --&gt;
&lt;!-- diferenciales e integración numérica. Uno de los problemas de la --&gt;
&lt;!-- integracion numérica es que un integrador puede "estallar" si el --&gt;
&lt;!-- intervalo de tiempo no es lo suficentemente pequeño. En lugar de dar --&gt;
&lt;!-- valores correctos, se disparán al infinito, debido a que estos --&gt;
&lt;!-- pequeños errores se multiplican rápidamente. La alternativa pasa por --&gt;
&lt;!-- usar integradores mas inteligentes; por ejemplo, RK4. --&gt;
&lt;!--  --&gt;
&lt;!-- ******* --&gt;
&lt;!-- Giros --&gt;
&lt;!-- ******* --&gt;
&lt;!--  --&gt;
&lt;!-- Una cosa a tener en cuenta cuando estamos simulando giros es que la --&gt;
&lt;!-- simulación de las propiedades física a baja velocidad es diferente de --&gt;
&lt;!-- la simulación a alta velocidad. A velocidades bajas (aparcamiento, --&gt;
&lt;!-- maniobras), las ruedas giran mas o menos en la dirección en la que --&gt;
&lt;!-- éstas apuntan. Para simular estos giros no se necesita considerar las --&gt;
&lt;!-- fuerzas y ni la masas. En otras palabras, es un problema de cinética --&gt;
&lt;!-- no de dinámica. --&gt;
&lt;!--  --&gt;
&lt;!-- A velocidades más altas, puede ocurrir que las ruedas apunten en una --&gt;
&lt;!-- dirección mientras que se muevan en otra. En otras palabras, las --&gt;
&lt;!-- ruedas a veces pueden tener una velocidad que no esté alineada con la --&gt;
&lt;!-- orientación de la rueda. Esto significa que hay una componente de --&gt;
&lt;!-- velocidad que está en un ángulo recto a la rueda. Por supuesto, esto --&gt;
&lt;!-- causa mucha fricción. Después de todo una rueda está diseñado para --&gt;
&lt;!-- rodar en una dirección particular sin demasiado esfuerzo.  En giros a --&gt;
&lt;!-- alta velocidad, las ruedas están siendo empujadas hacia los lados y --&gt;
&lt;!-- tenemos que tomar estas fuerzas en cuenta. --&gt;
&lt;!--  --&gt;
&lt;!-- Veamos el caso de giros a bajas velocidades. Podemos suponer que las --&gt;
&lt;!-- ruedas se están moviendo en la dirección que apuntan. En este caso, --&gt;
&lt;!-- las ruedas están rodando pero no se desliza hacia los lados. Si las --&gt;
&lt;!-- ruedas delanteras están giradas en un ángulo delta y el coche se está --&gt;
&lt;!-- moviendo a una velocidad constante, entonces el coche describirá una --&gt;
&lt;!-- trayectoria circular. Imagínese líneas que se proyectan desde el --&gt;
&lt;!-- centro de los hubcabs de la rueda delantera y trasera en el interior --&gt;
&lt;!-- de la curva. Cuando estas dos líneas se cruzan definen el centro de la --&gt;
&lt;!-- circuferencia que está realizando el giro del coche. --&gt;
&lt;!--  --&gt;
&lt;!-- Esto está muy bien ilustrado en la siguiente figura. Note cómo las --&gt;
&lt;!-- líneas verdes se cruzan en un punto, el centro alrededor del cual el --&gt;
&lt;!-- vehículo está girando. También se puede notar que las ruedas --&gt;
&lt;!-- delanteras no están giradas en el mismo ángulo, la rueda exterior se --&gt;
&lt;!-- volvió un poco menos que la rueda interior. Esto es también lo que --&gt;
&lt;!-- sucede en la vida real, el mecanismo de dirección diferencial de un --&gt;
&lt;!-- automóvil está diseñado para girar las ruedas en un ángulo --&gt;
&lt;!-- diferente. Para una simulación de un coche puede que esta sutileza sea --&gt;
&lt;!-- tan importante. Se va a centrar la explicación en el ángulo de --&gt;
&lt;!-- dirección de la rueda delantera en el interior de la curva y se --&gt;
&lt;!-- ignorará la rueda en el otro lado. --&gt;
&lt;!--  --&gt;
&lt;!-- El radio del círculo se puede determinar a través de cálculos --&gt;
&lt;!-- geométricos, como se ve en el siguiente diagrama: --&gt;
&lt;!--  --&gt;
&lt;!-- .. image:: http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games_files/ctangles.jpg --&gt;
&lt;!-- :align: center --&gt;
&lt;!--  --&gt;
&lt;!-- La distancia entre el eje delantero y el trasero se calcula desde la base de --&gt;
&lt;!-- la rueda y denota como L. El radio del círculo que describe el coche --&gt;
&lt;!-- (para ser preciso el círculo que describe la rueda delantera) se llama --&gt;
&lt;!-- R. El diagrama muestra un triángulo con un vértice en el centro del --&gt;
&lt;!-- círculo y uno en el centro de cada rueda. El ángulo en la rueda --&gt;
&lt;!-- trasera es de 90 grados por definición. El ángulo en la rueda --&gt;
&lt;!-- delantera es de 90 grados menos delta. Esto significa que el ángulo en --&gt;
&lt;!-- el centro del círculo también es delta (la suma de los ángulos de un --&gt;
&lt;!-- triángulo es siempre 180 grados). El seno de este ángulo es la base de --&gt;
&lt;!-- la rueda dividido por el radio del círculo, por lo tanto: --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/cteq_r.gif --&gt;
&lt;!--  --&gt;
&lt;!-- Tenga en cuenta que si el ángulo de dirección es cero, entonces el --&gt;
&lt;!-- radio del círculo es infinito, es decir, que está conduciendo en línea --&gt;
&lt;!-- recta.  De esta forma podemos derivar el radio del círculo del ángulo --&gt;
&lt;!-- de dirección. Bien, el siguiente paso consiste en calcular la velocidad --&gt;
&lt;!-- angular, es decir, la velocidad a la que el coche gira. La velocidad --&gt;
&lt;!-- angular se suele representar mediante la letra griega omega (), y se --&gt;
&lt;!-- expresa en radianes por segundo. (Un radián es un círculo completo, --&gt;
&lt;!-- dividido por 2 pi). Es bastante sencillo de determinar: si estamos --&gt;
&lt;!-- conduciendo en círculos a una velocidad constante v y el radio del círculo --&gt;
&lt;!-- es R, ¿cuánto tiempo se tarda en completar un círculo? Esa es la --&gt;
&lt;!-- circunferencia dividida por la velocidad. En el momento en que el --&gt;
&lt;!-- coche ha descrito una trayectoria circular también ha girado alrededor --&gt;
&lt;!-- de su eje exactamente una vez. En otras palabras: --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/cteq_av.gif --&gt;
&lt;!--  --&gt;
&lt;!-- Mediante el uso de estas dos últimas ecuaciones, sabemos lo rápido que --&gt;
&lt;!-- el coche debe acudir en busca de un ángulo de giro dado a una --&gt;
&lt;!-- velocidad específica. Eso es todo lo que necesitamos para giros a --&gt;
&lt;!-- bajas velocidades. El ángulo de dirección se determina a partir de la --&gt;
&lt;!-- entrada del usuario. La velocidad del coche se determina de la misma --&gt;
&lt;!-- forma en que se calcula en movimientos rectilíneos (el vector de --&gt;
&lt;!-- velocidad siempre apunta en la dirección del coche). A partir de éste --&gt;
&lt;!-- se calcula el radio del círculo y la velocidad angular. La velocidad --&gt;
&lt;!-- angular se utiliza para cambiar la orientación del coche a una tasa --&gt;
&lt;!-- específica. La velocidad del coche no se ve afectado por el cambio, el --&gt;
&lt;!-- vector de velocidad sólo rota para que coincida con la orientación del --&gt;
&lt;!-- coche. --&gt;
&lt;!--  --&gt;
&lt;!-- ***************************** --&gt;
&lt;!-- Giros a altas velocidades --&gt;
&lt;!-- ***************************** --&gt;
&lt;!--  --&gt;
&lt;!-- Por supuesto, no hay muchos juegos que involucran autos que circulan --&gt;
&lt;!-- alrededor tranquilamente (aparte de la legendaria Trabant Granny --&gt;
&lt;!-- Racer;-). Los jugadores son impaciente y por lo general quieren llegar --&gt;
&lt;!-- a algún lugar a toda prisa, añadiendo derrapes, y destrozo de --&gt;
&lt;!-- mobiliario vario. El objetivo es encontrar un modelo de físicas que --&gt;
&lt;!-- permita vueltas subvirajes, sobreviraje, derrape, freno de mano, etc. --&gt;
&lt;!--  --&gt;
&lt;!-- A altas velocidades, ya no podemos asumir que las ruedas se están --&gt;
&lt;!-- moviendo en la dirección que apuntan. Están unidas a la carrocería del --&gt;
&lt;!-- vehículo que tiene una cierta masa y lleva un toma tiempo al coche --&gt;
&lt;!-- reaccionar a las fuerzas de dirección. El cuerpo del coche también --&gt;
&lt;!-- puede tener una velocidad angular. Al igual que con la velocidad --&gt;
&lt;!-- lineal, lleva tiempo que ésta tome los valores que nosotros queremos --&gt;
&lt;!-- para que el coche gire hacia donde queramos. La velocidad angular --&gt;
&lt;!-- depende de la aceleración angular que es a su vez dependiente del par --&gt;
&lt;!-- de torsión y de la inercia (que son los equivalentes de rotación de la --&gt;
&lt;!-- fuerza y ​​de la masa). --&gt;
&lt;!--  --&gt;
&lt;!-- Además, el propio vehículo no siempre se mueve en la dirección en que --&gt;
&lt;!-- quiere el conductor. Piense en pilotos de rally que pasan por una --&gt;
&lt;!-- curva. El ángulo entre la orientación del coche y vector de velocidad --&gt;
&lt;!-- del coche se conoce como el ángulo de deslizamiento lateral (beta). --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/ctbeta.jpg --&gt;
&lt;!--  --&gt;
&lt;!-- Ahora echemos un vistazo a alta velocidad en curva desde el punto de --&gt;
&lt;!-- vista de la rueda. En esta situación tenemos que calcular la velocidad --&gt;
&lt;!-- lateral de los neumáticos. Dado que las ruedas grian, tienen --&gt;
&lt;!-- relativamente baja resistencia al movimiento hacia adelante o hacia --&gt;
&lt;!-- atrás. sin embargo, las ruedas oponen resistencia a movimientos --&gt;
&lt;!-- perpendiculares a la dirección en la que apuntan. Pruebe empujando un --&gt;
&lt;!-- neumático del coche de lado. Esto es muy difícil porque hay que vencer --&gt;
&lt;!-- la fuerza máxima fricción estática para conseguir que la rueda se deslice. --&gt;
&lt;!--  --&gt;
&lt;!-- En las curvas de alta velocidad, los neumáticos sufren unas las --&gt;
&lt;!-- fuerzas laterales también conocida como la fuerza de viraje. Esta --&gt;
&lt;!-- fuerza depende del ángulo de deslizamiento (alfa), que es el ángulo --&gt;
&lt;!-- entre el rumbo del neumático y su dirección de desplazamiento. A --&gt;
&lt;!-- medida que el ángulo de deslizamiento crece, también lo hace la fuerza --&gt;
&lt;!-- de viraje. La fuerza de viraje por neumático también depende del peso --&gt;
&lt;!-- sobre el neumático. En ángulos de deslizamiento bajos, la relación --&gt;
&lt;!-- entre el ángulo de deslizamiento y fuerza de viraje es lineal, en --&gt;
&lt;!-- otras palabras: --&gt;
&lt;!--  --&gt;
&lt;!-- Flateral = Ca * alpha --&gt;
&lt;!-- donde la constante de Ca se conoce como la rigidez en las curvas. --&gt;
&lt;!--  --&gt;
&lt;!-- Si desea ver esta explicado en una imagen, tenga en cuenta la --&gt;
&lt;!-- siguiente. El vector de velocidad de la rueda tiene un ángulo alfa con --&gt;
&lt;!-- respecto a la dirección en la que la rueda apunta. Podemos dividir el --&gt;
&lt;!-- vector velocidad v en dos componentes. El vector longtitudinal = cos --&gt;
&lt;!-- magnitud (alfa) * v. El movimiento en esta dirección se corresponde con --&gt;
&lt;!-- la dirección en la que giro la rueda. El vector lateral tiene --&gt;
&lt;!-- magnitud sen (alfa) * v y provoca una fuerza de resistencia en la --&gt;
&lt;!-- dirección opuesta: la fuerza de viraje. --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/ctimage8.gif --&gt;
&lt;!--  --&gt;
&lt;!-- Hay tres componentes que definen el ángulo de deslizamiento de las --&gt;
&lt;!-- ruedas: el ángulo de deslizamiento lateral del coche, la rotación --&gt;
&lt;!-- angular del coche alrededor del eje hacia arriba (velocidad de --&gt;
&lt;!-- derrape) y, para las ruedas delanteras, el ángulo de dirección. --&gt;
&lt;!--  --&gt;
&lt;!-- El ángulo de deslizamiento lateral b (beta) es la diferencia entre la --&gt;
&lt;!-- orientación del vehículo y la dirección del movimiento. En otras --&gt;
&lt;!-- palabras, es el ángulo entre el eje longtitudinal y la dirección real --&gt;
&lt;!-- de viaje. Así que es similar en concepto a lo que el ángulo de --&gt;
&lt;!-- deslizamiento es para los neumáticos. Debido a que el coche puede --&gt;
&lt;!-- moverse en una dirección diferente a donde está apuntando, experimenta --&gt;
&lt;!-- un movimiento hacia los lados. Esto es equivalente a la componente --&gt;
&lt;!-- perpendicular del vector de velocidad. --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/ctbeta.gif --&gt;
&lt;!--  --&gt;
&lt;!-- Si el coche está girando alrededor del centro de masas (CG) a una tasa --&gt;
&lt;!-- omega (en rad / s!), esto significa que las ruedas delanteras --&gt;
&lt;!-- describen una trayectoria circular alrededor del centro de gravedad --&gt;
&lt;!-- CG. Si el coche realiza un círculo completo, la rueda delantera --&gt;
&lt;!-- habrá descrito una trayectoria circular de 2 * pi * b la  distancia alrededor de CG --&gt;
&lt;!-- en 1 / (2.pi.omega) segundos, donde b es la distancia desde el eje --&gt;
&lt;!-- delantero al CG. Esto se traduce en una velocidad lateral de omega * --&gt;
&lt;!-- b. Para las ruedas traseras, esto es -omega * c. Tenga en cuenta la --&gt;
&lt;!-- inversión del signo. Para expresar esto como un ángulo, se debe tomar el arco --&gt;
&lt;!-- tangente de la velocidad lateral dividida por la velocidad --&gt;
&lt;!-- longtitudinal (tal como lo hicimos para la beta). Para ángulos --&gt;
&lt;!-- pequeños podemos aproximar arctan (vy / vx) por vx / vy. --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/ctav.gif --&gt;
&lt;!--  --&gt;
&lt;!-- El ángulo de dirección (delta) es el ángulo que las ruedas delanteras --&gt;
&lt;!-- hacen en relación a la orientación del coche. No hay ángulo de dirección --&gt;
&lt;!-- de las ruedas traseras, ya que siempre están alineadas con la orientación --&gt;
&lt;!-- del cuerpo del coche. En el caso de coches con tracción delantera, el efecto de la --&gt;
&lt;!-- dirección invierte. --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/ctdeltapic.gif --&gt;
&lt;!--  --&gt;
&lt;!-- Los ángulos de deslizamiento para las ruedas delanteras y traseras --&gt;
&lt;!-- están dadas por las siguientes ecuaciones: --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/ct_alphas.gif --&gt;
&lt;!--  --&gt;
&lt;!-- La fuerza lateral ejercida por el neumático es una función del ángulo --&gt;
&lt;!-- de deslizamiento. De hecho, para los neumáticos reales es una función --&gt;
&lt;!-- bastante complejo una vez mejor descrito por diagramas de curvas, --&gt;
&lt;!-- tales como las siguientes: --&gt;
&lt;!--  --&gt;
&lt;!-- file:///home/isaac/Documentos/tfg/fisicas/Car%20Physics_files/ctsacurve.gif --&gt;
&lt;!--  --&gt;
&lt;!-- El diagrama anterior muestra cómo se comporta la fuerza lateral para --&gt;
&lt;!-- cualquier valor particular del ángulo de deslizamiento. Este tipo de --&gt;
&lt;!-- diagrama es específico para un tipo particular de neumático, siendo el --&gt;
&lt;!-- diagrama anterior un ejemplo ficticio. El pico está alrededor de los 3 --&gt;
&lt;!-- grados. En ese punto la fuerza lateral supera incluso ligeramente la --&gt;
&lt;!-- carga de 5 kN en el neumático. --&gt;
&lt;!--  --&gt;
&lt;!-- Este diagrama es similar a la curva de relación de deslizamiento visto --&gt;
&lt;!-- anteriormente lo que puede llevar a confusión. La curva de relación de --&gt;
&lt;!-- deslizamiento nos da la fuerza de avance en función de cantidad de --&gt;
&lt;!-- deslizamiento longtitudinal. La curva anterior nos da la fuerza --&gt;
&lt;!-- lateral en función del ángulo de deslizamiento. --&gt;
&lt;!--  --&gt;
&lt;!--  --&gt;
&lt;!-- La fuerza lateral no sólo depende del ángulo de --&gt;
&lt;!-- deslizamiento, sino también de la carga en el neumático. La --&gt;
&lt;!-- gráfica anterior muestra una gráfica donde el valor máximo de --&gt;
&lt;!-- la fuerza lateral asciende a 5000N; es decir, la fuerza --&gt;
&lt;!-- ejercida por 500 kg de masa empujando contra la superficie del --&gt;
&lt;!-- neumático. Diferentes curvas de fuerza aplican diferentes --&gt;
&lt;!-- fuerzas debido a que el peso cambia la forma del neumático y --&gt;
&lt;!-- por lo tanto sus propiedades. Pero la forma de la curva es muy --&gt;
&lt;!-- similar, aparte de la escala, por lo que se puede aproximar a --&gt;
&lt;!-- que la fuerza lateral es lineal con la carga y creamos un --&gt;
&lt;!-- diagrama de fuerza lateral normalizada dividiendo la fuerza --&gt;
&lt;!-- lateral por el 5 kN de carga. --&gt;
&lt;!--  --&gt;
&lt;!-- Flateral = Fn, lat * Fz --&gt;
&lt;!-- donde Fnlat es la fuerza lateral normaliazda para un angulo de deslizamiento dado y --&gt;
&lt;!-- Fz es la carga del neumático. --&gt;
&lt;!--  --&gt;
&lt;!-- Para ángulos muy pequeños (por debajo del máximo) la fuerza lateral --&gt;
&lt;!-- puede ser aproximado por una función lineal: --&gt;
&lt;!--  --&gt;
&lt;!-- Flateral = Ca * alpha --&gt;
&lt;!-- La constante de Ca se conoce con el --&gt;
&lt;!-- nombre de la rigidez de las curvas. Esta es la pendiente del --&gt;
&lt;!-- diagrama en ángulo de deslizamiento 0. --&gt;
&lt;!--  --&gt;
&lt;!-- Si desea una mejor aproximación de la relación entre el ángulo de --&gt;
&lt;!-- deslizamiento y la fuerza lateral debe usar la fórmula mágica Pacejka --&gt;
&lt;!-- , desarrollada en la Universidad de Delft. Dicha fórmula es la que --&gt;
&lt;!-- usan los físicos para modelar el comportamiento de los --&gt;
&lt;!-- neumáticos. Es un conjunto de ecuaciones con una gran cantidad de --&gt;
&lt;!-- constantes "mágicas". Al elegir las constantes adecuadas estas --&gt;
&lt;!-- ecuaciones proporcionan una muy buena aproximación de curvas que se --&gt;
&lt;!-- encuentran a través de pruebas de neumáticos. El problema es que los --&gt;
&lt;!-- fabricantes de neumáticos son muy reservado acerca de los valores de --&gt;
&lt;!-- estas constantes toman. Así, por un lado, es una técnica de modelado --&gt;
&lt;!-- muy precisas. Por otro lado, usted tendrá un tiempo para encontrar --&gt;
&lt;!-- valores adecuados a los neumáticos que se estén usando. --&gt;
&lt;!--  --&gt;
&lt;!-- Las fuerzas laterales de los cuatro neumáticos tienen dos resultados: --&gt;
&lt;!-- una fuerza neta en las curvas y un par alrededor del eje de giro. La --&gt;
&lt;!-- fuerza de viraje es la fuerza sobre el centro de gravedad en un ángulo --&gt;
&lt;!-- recto con la orientación del coche y sirve como la fuerza centrípeta --&gt;
&lt;!-- que es necesaria para describir una trayectoria circular. La --&gt;
&lt;!-- contribución de las ruedas traseras a la fuerza de viraje es la misma --&gt;
&lt;!-- que la fuerza lateral. Para las ruedas delanteras, multiplicar la --&gt;
&lt;!-- fuerza lateral por cos (delta) para permitir el ángulo de dirección. --&gt;
&lt;!--  --&gt;
&lt;!-- Fcornering = Flat, rear + cos(delta) * Flat, front --&gt;
&lt;!--  --&gt;
&lt;!-- Como punto de interés, podemos encontrar el radio del círculo ahora --&gt;
&lt;!-- que sabemos la fuerza centrípeta utilizando la siguiente ecuación --&gt;
&lt;!--  --&gt;
&lt;!-- Fcentripetal = M v2 / radius --&gt;
&lt;!--  --&gt;
&lt;!-- La fuerza lateral también introducir un par que hace que el cuerpo del --&gt;
&lt;!-- coche para encender. Después de todo, sería muy tonto si el coche está --&gt;
&lt;!-- describiendo un círculo, pero sigue apuntando en la misma --&gt;
&lt;!-- dirección. La fuerza de viraje se asegura la CG describe un círculo, --&gt;
&lt;!-- pero ya que opera sobre una masa puntual no hace nada sobre la --&gt;
&lt;!-- orientación coche. Eso es lo que necesitamos el par alrededor del eje --&gt;
&lt;!-- de guiñada para.  El torque es la fuerza multiplicada por la distancia --&gt;
&lt;!-- perpendicular entre el punto donde se aplica la fuerza y el punto de --&gt;
&lt;!-- pivote. Así que para las ruedas traseras de la contribución a la par --&gt;
&lt;!-- es -Flat, trasera * c y para las ruedas delanteras es cos (delta) * --&gt;
&lt;!-- Piso *, delante b. Tenga en cuenta que el signo es diferente. --&gt;
&lt;!--  --&gt;
&lt;!-- La aplicación de par de torsión sobre la carrocería del vehículo --&gt;
&lt;!-- introduce la aceleración angular. Al igual que la segunda ley de --&gt;
&lt;!-- Newton F = ma, hay una ley para el par y aceleración angular: --&gt;
&lt;!--  --&gt;
&lt;!-- Torque = Inertia * angular acceleration. --&gt;
&lt;!--  --&gt;
&lt;!-- La inercia de un cuerpo rígido es una constante que depende de su masa --&gt;
&lt;!-- y la geometría (y la distribución de la masa dentro de su --&gt;
&lt;!-- geometría). Manuales de ingeniería proporcionan fórmulas para la --&gt;
&lt;!-- inercia de las formas comunes tales como esferas, cubos, etc. --&gt;
&lt;!--  --&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>bullet</category><category>mathjax</category><guid>http://isaaclacoba.github.io/tinman/posts/creando-coche/creando-coches-para-el-juego.html</guid><pubDate>Sat, 07 Mar 2015 12:52:25 GMT</pubDate></item><item><title>Roadmap del proyecto</title><link>http://isaaclacoba.github.io/tinman/posts/roadmap/roadmap-del-proyecto.html</link><dc:creator>Isaac Lacoba Molina</dc:creator><description>&lt;div&gt;&lt;p&gt;En esta entrada se va a mostrar cuál es el estado actual del proyecto, qué objetivos se han cumplido y en qué porcentaje. Además se hablará en qué se está trabajando actualmente.&lt;/p&gt;
&lt;div class="section" id="estado-del-proyecto"&gt;
&lt;h2&gt;Estado del proyecto&lt;/h2&gt;
&lt;p&gt;En primer lugar, recordemos cuál es la lista de hitos que se pretenden cumplir en este proyecto:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Desarrollar un videojuego utilizando gráficos 3D.&lt;/li&gt;
&lt;li&gt;Implementar mecanismos de instrumentación que permitan aplicar técnicas de testing automático.&lt;/li&gt;
&lt;li&gt;Diseñar e implementar un modelo de red para permitir modo multijugador.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como subobjetivo, se pretende que dicho videojuego pueda servir a futuros programadores para aprender técnicas básicas y fundamentos esenciales del desarrollo de un videojuego. Por esta razón se hará énfasis en los siguientes aspectos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Claridad del código.&lt;/li&gt;
&lt;li&gt;Uso de patrones de diseño.&lt;/li&gt;
&lt;li&gt;Técnicas de introspección de objetos.&lt;/li&gt;
&lt;li&gt;Acceso al código fuente y al propio proyecto. Por esta razón se distribuirá bajo una licencia libre.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="grado-de-cumplimiento-de-los-objetivos"&gt;
&lt;h3&gt;Grado de cumplimiento de los objetivos&lt;/h3&gt;
&lt;p&gt;Hasta la fecha se han cumplido los siguientes objetivos:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Desarrollo de un videojuego utilizando gráficos 3D: Se ha conseguido desarrollar una primera versión del juego de carreras. En el siguiente vídeo se ve una muestra de lo desarrollado hasta la fecha. Aunque el vídeo no tiene sonido, el motor de juego que se ha desarrollado para este proyecto sí que cuenta con el soporte para incluirlos.&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Trabajo futuro&lt;/em&gt;: animaciones y efectos de partículas, así
como mejorar el aspecto visual de los menús, seleccionar sonidos
adecuados para este juego(música y efectos). En cuanto al gameplay, se
pretende dar la oportunidad al jugador de mejorar su coche mediante la
compra de mejoras.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;iframe width="425" height="344" src="//www.youtube.com/embed/Rn_WwsMEW_4?rel=0&amp;amp;hd=1&amp;amp;wmode=transparent"&gt;&lt;/iframe&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Implementar mecanismos de instrumentación que permitan aplicar técnicas de testing automático: gran parte de la arquitectura del motor de juego que se ha desarrollado para este proyecto ha surgido a partir de las pruebas que se han escrito. Son pruebas muy sencillas basadas en log escritas a modo de pequeños &lt;a class="reference external" href="https://bitbucket.org/arco_group/tfg.tinman/src/e56b57a12b1661caa19d066f3127827e28a36186/examples/?at=master"&gt;ejemplos&lt;/a&gt;. Dichos ejemplos son en realidad pruebas de comportamiento; es decir, lo que se persigue no es comprobar que el valor de retorno de una determinada función es correcto, sino que el funcionamiento en conjunto del sistema es el adecuado. La ventaja es que las pruebas se han escrito con la hoja de especificación de requisitos en la mano, lo que nos permite afirmar que se están implementando al pie de la letra. Las pruebas sacan obtienen la información del sistema a través de un sistema de logs que se ha añadido al motor, el cuál facilita la labor de depuración. Además, dado que la salida de las pruebas se registra en ficheros de texto, es posible automatizar la ejecución de las pruebas y mas tarde comprobar los resultados.&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Trabajo futuro&lt;/em&gt;: La limitación del sistema de log que usamos es que sólo puede proporcionar información relativa a los objetos del juego, la traza de ejecución o las excepciones lanzadas. Cuándo queremos comprobar cualquier aspecto referente a la interfaz gráfica, nos encontramos con que no tenemos el soporte necesario. Una posible forma de hacer frente a esta limitación consistiría en hacer uso de una biblioteca de analisis de imagen, a la cuál le pasaríamos una captura de pantalla. En teoría, este tipo de pruebas nos permitirían asegurarnos que la construcción de los escenarios es correcta, así como los menús y demás elementos gráficos, aunque queda mucho trabajo de investigación por delante para ver hasta qué punto es realmente útil la implementación de pruebas de este tipo.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Diseñar e implementar un modelo de red para permitir modo multijugador: actualmente se está trabajando en el modelo de red del juego. Para ello, se está utilizando &lt;a class="reference external" href="https://www.zeroc.com/"&gt;ZeroC Ice&lt;/a&gt;, un middleware de red orientado a objetos. Cuenta con implementación en python, C++, java, etcétera.&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Trabajo futuro&lt;/em&gt;: Generalmente se suele decir que los middleware de
red añaden demasiada sobrecarga y, por esta razón, no son adecuados
para juegos que requieren reacciones rápidas por parte de los
jugadores, como son los juegos de carreras. Con el uso de este
middleware se pretende probar que el uso de un middleware de red, si
es lo suficientemente flexible, permite adecuarse a las necesidades de
los desarrolladores y, aunque añada una mayor sobrecarga que una
implementación que sólo ofrezca soporte para sockets, los mecanismos
de alto nivel que proporciona hace que merezca la pena.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://isaaclacoba.github.io/tinman/posts/roadmap/roadmap-del-proyecto.html</guid><pubDate>Sun, 22 Feb 2015 16:15:49 GMT</pubDate></item><item><title>Introducción a Bullet Physics</title><link>http://isaaclacoba.github.io/tinman/posts/introduccion-bullet/introduccion-a-bullet-physics.html</link><dc:creator>Isaac Lacoba Molina</dc:creator><description>&lt;div&gt;&lt;img alt="bullet_logo.png" class="align-center" src="http://isaaclacoba.github.io/tinman/posts/introduccion-bullet/bullet_logo.png"&gt;
&lt;p&gt;En esta nueva entrada se va a hablar de Bullet Physics, el motor de
físicas y detección de colisiones usado en el proyecto Tinman.Se va a
explicar brevemente la razón de la elección, se enumerarán las
características principales y, a continuación, se mostrará un breve
programa que ilustrará cómo integrar Bullet junto a &lt;a class="reference external" href="http://isaaclacoba.github.io/tinman/posts/introduccion-ogre3d/introduccion-a-ogre3d.html"&gt;Ogre3D&lt;/a&gt;,
la biblioteca de renderizado usada en este proyecto.&lt;/p&gt;
&lt;div class="section" id="que-es-bullet-physics"&gt;
&lt;h2&gt;¿Qué es Bullet Physics?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bulletphysics.org/wordpress/"&gt;Bullet Physics&lt;/a&gt; es una
biblioteca de físicas y detección de colisiones. Se distribuye bajo
licencia ZLib y está desarrollada usando el lenguaje de programación
C++. El código fuente se encuentra disponible en el &lt;a class="reference external" href="https://github.com/bulletphysics/bullet3"&gt;repositorio&lt;/a&gt;
oficial del proyecto.&lt;/p&gt;
&lt;p&gt;Bullet ha sido usado en multitud de películas, tales como Hancock o
Sherlock Holmes, así como videojuegos comerciales AAA, entre los que
destacan Grand Theft auto IV, Grand Theft auto V o Red Dead
Redemption. Como curiosidadw, la NASA está utilizando Bullet en un
&lt;a class="reference external" href="http://bulletphysics.org/wordpress/?p=413"&gt;framework&lt;/a&gt; de desarrollo
propio que tiene como propósito el cálculo de integridad tensional en
robots.&lt;/p&gt;
&lt;p&gt;Entre las principales característica de Bullet podemos enumerar las siguientes:
- Soporte para una gran multitud de plataformas, tales
como PlayStation 3 y 4, Xbox 360 y One, Wii, Gnu/Linux, Windows,
MacOSX, iPhone, Android y &lt;a class="reference external" href="http://bulletphysics.org/wordpress/?p=333"&gt;navegador web&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Elección entre precisión simple y doble en operaciones de punto flotante.&lt;/li&gt;
&lt;li&gt;Detección de colisiones, tanto continua como discreta, incluyendo rayqueries y tests de colisión de formas convexas (&lt;em&gt;sweep test&lt;/em&gt;). Permite realizar test de colisión con mallas convexas y cóncavas, además de con todo tipo de formas primitivas: cubos, esferas, planos, etcétera.&lt;/li&gt;
&lt;li&gt;Dinámica de cuerpos rígidos, de vehículos, controladores de personajes, creación de &lt;a class="reference external" href="http://es.wikipedia.org/wiki/F%C3%ADsica_ragdoll"&gt;ragdolls&lt;/a&gt;, restricciones de tipo slider, bisagra y 6DOF (6 grados de libertad).&lt;/li&gt;
&lt;li&gt;Dinámica de cuerpos fluidos que permite modelar ropa, tela y volumenes deformables, permitiendo interacción con cuerpos rígidos.&lt;/li&gt;
&lt;li&gt;Existen plugins para dar soporte a Maya, Cinema 4D, está integrado con Blender, soporta ficheros COLLADA.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="porque-es-necesario-utilizar-un-motor-de-fisicas"&gt;
&lt;h3&gt;¿Porqué es necesario utilizar un motor de físicas?&lt;/h3&gt;
&lt;p&gt;Como se explicó en el &lt;a class="reference external" href="http://isaaclacoba.github.io/tinman/posts/justificacion-objetivos/justificacion-y-objetivos-del-proyecto.html"&gt;post anterior&lt;/a&gt;,
uno de los objetivos de este proyecto es desarrollar un videojuego de
carreras 3D. Aunque se trata de un videojuego arcade, es necesario
modelar el comportamiento del coche de una forma mínimamente realista,
además de poder detectar y gestionar colisiones entre los coches y el
escenario.&lt;/p&gt;
&lt;p&gt;Como puede verse en este &lt;a class="reference external" href="http://www.asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games.html"&gt;artículo&lt;/a&gt;
modelar el comportamiento de un coche presenta algunos problemas,
entre los que podemos destacar la distribución de la carga del coche
derivada de la aceleración y frenado de este o la gran cantidad de
propiedades físicas que intervienen en el movimiento del coche, como
la tracción, el par motor que se ejerce sobre las ruedas a través de
la transmisión, la inercia del coche, etcétera.&lt;/p&gt;
&lt;p&gt;El uso de un motor de físicas nos permite juegos mas realistas, al
tiempo que abstrae al desarrollador de los detalles de bajo nivel, ofreciéndonos una implementación bien probada y eficiente.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="porque-elegir-bullet-antes-que-otras-bibliotecas-de-fisicas"&gt;
&lt;h3&gt;¿Porqué elegir Bullet antes que otras bibliotecas de físicas?&lt;/h3&gt;
&lt;p&gt;Unas de los requisitos que existen en este proyecto es el uso de
tecnologías de código libre. A la hora de elegir un motor de físicas se descartaron por defecto los motores comerciales privativos, entre los que se pueden destacar Havok y PhysX. Entre los motores libres, se encontraron tres que podrían competir en calidad con los dos mencionados anteriormente: Bullet Physics, Open Dynamics Engine (mas conocido como ODE) y Newton Physics.&lt;/p&gt;
&lt;p&gt;Se eligió Bullet debido a que de los tres motores anteriores, era el que mas facilidades daba a la hora de integrarlo con OGRE3D, ofrece dinámica de vehículos basada en rayqueries, es un proyecto mas moderno y mirando a largo plazo, el equipo de desarrollo de Bullet está actualmente implementando soporte sobre GPU sin necesidad de usar OpenCL ni Cuda. Bullet en su versión 2.8 ofrece soporte para las dos bibliotecas anteriores. Por último, el hecho de que existan proyectos comerciales de gran renombre, como es la saga &lt;em&gt;Grand Thef Auto&lt;/em&gt;, terminaron de decantar la balanza a favor de esta biblioteca.&lt;/p&gt;
&lt;p&gt;Aunque es cierto que los tres motores de físicas ofrecen
implementaciones de dinámica de cuerpos rígidos muy eficientes, una
búsqueda por las páginas oficiales de los proyectos revela que Bullet
es el más activo de los tres, disponiendo de una mayor cantidad de
documentación, teniendo como único punto negativo que la documentación
del &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/annotated.html"&gt;API&lt;/a&gt;
no ofrece información acerca del uso de los métodos, mas allá del
nombre del mismo y una referencia a la línea en la que se encuentra la
definición de dicho método dentro del fichero fuente donde se haya
implementado.&lt;/p&gt;
&lt;p&gt;Todas estas razones sumadas han hecho que se elija Bullet Physics como motor de físicas en este proyecto.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="arquitectura"&gt;
&lt;h2&gt;Arquitectura&lt;/h2&gt;
&lt;p&gt;Bullet ha sido diseñado para ser modular y adaptable. La biblioteca da
la libertad al desarrollador de usar los componentes que necesite en
cada momento, ignorando los demás. Por ejemplo, se podría hacer uso de
la capa de detección de colisiones sin hacer uso de las capas
superiores. En la siguiente figura se puede observar un esquema
general de la organización por capas de la biblioteca.&lt;/p&gt;
&lt;img alt="organizacion-bullet.png" class="align-center" src="http://isaaclacoba.github.io/tinman/posts/introduccion-bullet/organizacion-bullet.png"&gt;
&lt;div class="section" id="pipeline-de-simulacion-de-cuerpos-rigidos"&gt;
&lt;h3&gt;Pipeline de simulación de cuerpos rígidos&lt;/h3&gt;
&lt;p&gt;El siguiente diagrama muestra las estructuras de datos mas
importantes, así como las etapas del encauzamiento dentro de
Bullet. Este encauzamiento se ejecuta de izquierda a derecha,
comenzando por aplicar la gravedad y terminando por integrar las
posiciones de los cuerpos.&lt;/p&gt;
&lt;img alt="pipeline-bullet.png" class="align-center" src="http://isaaclacoba.github.io/tinman/posts/introduccion-bullet/pipeline-bullet.png"&gt;
&lt;p&gt;El encauzamiento y las estructuras de datos están representados en
Bullet a través de la clase DynamicsWorld. Cuando se ejecuta el método
"stepSimulation de dicha clase, en realidad se está ejecutando el
encauzamiento anterior. La implementación por defecto se encuentra en
la clase btDiscreteDynamicsWorld.&lt;/p&gt;
&lt;p&gt;Bullet permite trabajar al desarrollador con subfases del
encauzamiento, como la de detección de colisiones, la fase en la que
se aplican los efectos de las colisiones a los cuerpos
físicos(narrowphase) o la fase de resolución de restricciones.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="veamos-algo-de-codigo"&gt;
&lt;h2&gt;Veamos algo de código&lt;/h2&gt;
&lt;p&gt;A continuación veremos un sencillo ejemplo en el que generaremos
esferas que rebotarán contra el suelo. Estas esferas se crearán
dinámicamente al pulsar la tecla 'B'.&lt;/p&gt;
&lt;p&gt;Usaremos la biblioteca &lt;a class="reference external" href="http://sourceforge.net/projects/wgois/"&gt;OIS&lt;/a&gt;
para gestionar los eventos de teclado y Ogre3D como motor de
renderizado, que nos permitirá representar la escena. En este post se
dará por supuesto los conceptos básicos de Ogre3D. Para el lector que
no esté acostumbrado a trabajar con esta biblioteca, se aconseja
conocer al menos como inicializar el motor de renderizado, así como
gestionar nodos de escena y entidades. El código fuente se puede
encontrar en el repositorio de este &lt;a class="reference external" href="https://bitbucket.org/IsaacLacoba/intro-bullet"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="instalacion"&gt;
&lt;h3&gt;Instalación&lt;/h3&gt;
&lt;p&gt;Las explicaciones dadas en este post están orientadas a un sistema operativo GNU/Linux. En el repositorio anterior podemos encontrar un fichero &lt;a class="reference external" href="http://goo.gl/cKHhq9"&gt;DEPENDS&lt;/a&gt; donde se listan los paquetes necesarios. Para instalar dichos paquetes tan sólo tenemos que ejecutar en un terminal los siguientes comandos. Para instalar Ogre, así como algunas dependencias de OpenGL y el driver gráfico mesa:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt-get install libogre-1.8.0 libogre-1.8-dev freeglut3-dev libfreetype6 libfreetype6-dev libgl1-mesa-dev libgl1-mesa-glx
&lt;/pre&gt;
&lt;p&gt;En el caso de OIS:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt-get install libois-1.3.0 libois-dev
&lt;/pre&gt;
&lt;p&gt;Y en el de Bullet:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt-get install libbullet-dev libbullet2.82-dbg libbullet-extras-dev
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="inicializacion"&gt;
&lt;h3&gt;Inicialización&lt;/h3&gt;
&lt;p&gt;En este ejemplo, todo lo relativo a la inicialización de Bullet se
puede encontrar en los ficheros &lt;a class="reference external" href="https://bitbucket.org/IsaacLacoba/intro-bullet/src/ed9787be35bf81cb7cc61246e73729d96a42d374/src/managers/physics.cpp?at=master"&gt;physics.cpp&lt;/a&gt; y
&lt;a class="reference external" href="https://bitbucket.org/IsaacLacoba/intro-bullet/src/ed9787be35bf81cb7cc61246e73729d96a42d374/src/managers/physics.h?at=master"&gt;physics.h&lt;/a&gt;. En él, se van a modelar las esferas usando cuerpos
rígidos. Los cuerpos rígidos tienen como principal característica que
no se deforman; es decir, la distancia entre cualquier par de vértices
que forman la malla nunca varía. Por el contrario, los cuerpos fluidos
son aquellos que permiten deformaciones. En este post se va a
intentar obviar toda la base matemática y se va a centrar la
explicación en los aspectos referentes a la biblioteca.&lt;/p&gt;
&lt;p&gt;El elemento mas importante en Bullet es el &lt;em&gt;Mundo&lt;/em&gt;. El &lt;em&gt;Mundo&lt;/em&gt;
dentro de Bullet tiene varias responsabilidades, entre las que
podemos destacar:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;servir como estructura de datos donde almacenar los cuerpos
físicos que lo conforman.&lt;/li&gt;
&lt;li&gt;aplicar una serie de restricciones a estos cuerpos, como la
fuerza de la gravedad, detectar y aplicar colisiones entre estos
cuerpos y actualizar su posición automáticamente cuando se aplique
cualquier tipo de fuerza sobre estos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El &lt;em&gt;Mundo&lt;/em&gt; tiene diversas implementaciones dentro de la bibilioteca,
dependiendo de si utilizamos cuerpos rígidos o fluidos.  En este caso
se están usando cuerpos rígidos, de modo que la clase que se utilizará
será &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtDiscreteDynamicsWorld.html"&gt;btDiscreteDynamicsWorld&lt;/a&gt;. En el siguiente listado de código se muestra el constructor del gestor de
físicas, que inicializa el objeto &lt;em&gt;btDiscreteDynamicsWorld&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;Physics&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Physics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="n"&gt;gravity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;gravity_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gravity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="n"&gt;broadphase_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;btDbvtBroadphase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

       &lt;span class="n"&gt;solver_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;btSequentialImpulseConstraintSolver&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="n"&gt;collision_configuration_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;btDefaultCollisionConfiguration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="n"&gt;dispatcher_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;btCollisionDispatcher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collision_configuration_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;dynamics_world_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;btDiscreteDynamicsWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dispatcher_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;broadphase_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;solver_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collision_configuration_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;dynamics_world_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setGravity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gravity_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Cada uno de los objetos que recibe el constructor de la clase
&lt;em&gt;btDiscreteDynamicsWorld&lt;/em&gt; corresponde con una de las fases del
pipeline físico. El objeto broadphase corresponde a la fase de
detección de colisiones. Existen tres implementaciones de esta fase
que trabajan con diferentes estructuras de datos, lo que permite
acelerar la búsqueda de pares de colisión dependiendo de nuestras
necesidades:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/structbtDbvtBroadphase.html"&gt;btDbvtBroadphase&lt;/a&gt; usa una jerarquía de volumenes delimitantes
basada en un arbol AABB.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.bulletphysics.com/Bullet/BulletFull/classbtAxisSweep3.html"&gt;btAxisSweep3&lt;/a&gt; y &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbt32BitAxisSweep3.html"&gt;bt32BitAxisSweep3&lt;/a&gt; implementa  un algoritmo 3d de barrido y poda.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bullet.googlecode.com/svn/trunk/Extras/CUDA/btCudaBroadphase.h"&gt;btCudaBroadphase&lt;/a&gt; implementa un grid usando el hardware de la
GPU. Hace uso de Cuda, una tecnología para tarjetas gráficas Nvidia.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La fase de detección de colisiones hace uso de una serie de estructuras de datos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtCollisionObject.html"&gt;btCollisionObject&lt;/a&gt;:
almacena formas de colisión y las transformaciones de éstas.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtCollisionShape.html"&gt;btCollisionShape&lt;/a&gt;:
describe la forma de colisión de un objeto de colisión, tal como una
caja, una esfera, una forma convexa(convex hull) o una malla de
triángulos. Una forma de colisión puede ser compartida entre
múltiples objetos de colisión.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtGhostObject.html"&gt;btGhostObject&lt;/a&gt;: es un
caso especial de cuerpo de colisión útil para realizar consultas de
colisión de una forma rápida.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtCollisionWorld.html"&gt;btCollisionWorld&lt;/a&gt;:
almacena todos los objetos de colisión y proporciona una interfaz
que permite realizar peticiones de forma eficiente. Nuestro objeto
dynamics_world_ es de tipo btDiscreteDynamicsWorld, que es una
subclase de ésta.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El objeto dispatcher_ pertenece a la clase &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtCollisionDispatcher.html"&gt;btCollisionDispatcher&lt;/a&gt;, la
cuál ofrece algoritmos que manejan pares de colisión ConvexConvex y
ConvexConcave. Esta clase corresponde a la etapa &lt;em&gt;Narrowphase&lt;/em&gt;, usando
los pares de colisión generados en la fase &lt;em&gt;Broadphase&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El objeto collisionConfiguration_, de la clase
&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtDefaultCollisionConfiguration.html"&gt;btDefaultCollisionConfiguration&lt;/a&gt;,
ofrece una configuración por defecto que define aspectos internos del
asignador de la pila de detección de colisiones, del asignador de la
pila de memoria de bullet, etcétera.&lt;/p&gt;
&lt;p&gt;Por último, el objeto solver_, de la clase
&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtSequentialImpulseConstraintSolver.html"&gt;btSequentialImpulseConstraintSolver&lt;/a&gt;, ofrece una implementación del
método &lt;a class="reference external" href="http://es.wikipedia.org/wiki/M%C3%A9todo_de_Gauss-Seidel"&gt;Gauss-Seidel&lt;/a&gt; usado en analisis numérico para resolución de
sistemas de ecuaciones lineales. Esta clase está implementada usando paralelización SIMD(&lt;em&gt;Single Instruction, Multiple Data&lt;/em&gt;), una técnica
utilizada para conseguir paralelismo a nivel de datos. Sin entrar en
detalles, consiste en aplicar una misma operación sobre un conjunto de
datos.&lt;/p&gt;
&lt;p&gt;Tras inicializar la biblioteca, el siguiente paso consiste en crear
cuerpos y formas de colisión.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creando-los-cuerpos-rigidos-de-las-esferas"&gt;
&lt;h3&gt;Creando los cuerpos rígidos de las esferas&lt;/h3&gt;
&lt;p&gt;El siguiente listado de código muestra cómo se crean los cuerpos
rígidos en nuestro ejemplo:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;btRigidBody&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;Physics&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create_rigid_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;btTransform&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;worldTransform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;btCollisionShape&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;btScalar&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="n"&gt;inertia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;calculateLocalInertia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inertia&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;MotionState&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;motionState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MotionState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worldTransform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;btRigidBody&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;btRigidBodyConstructionInfo&lt;/span&gt;
    &lt;span class="n"&gt;rigidBodyCI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;motionState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inertia&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;btRigidBody&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;rigidBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;btRigidBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rigidBodyCI&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;dynamics_world_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;addRigidBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rigidBody&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rigidBody&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;El constructor de la clase &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtRigidBody.html"&gt;btRigidBody&lt;/a&gt; recibe un objeto &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/structbtRigidBody_1_1btRigidBodyConstructionInfo.html"&gt;btRigidBody::btRigidBodyConstructionInfo&lt;/a&gt;. Este objeto sirve para inyectar al constructor de la clase información relativa al cuerpo rígido que se va a crear . Los argumentos que recibe son la masa del objeto, el estado del cuerpo(&lt;em&gt;Motion State&lt;/em&gt; del cuál
hablaremos mas adelante), la forma física del cuerpo(&lt;em&gt;btCollisionShape&lt;/em&gt;) y el vector de inercia.&lt;/p&gt;
&lt;p&gt;En el método &lt;em&gt;Physics::create_rigid_body&lt;/em&gt;, listado anteriormente, se
comprueba que la masa del cuerpo sea distinta de cero, ya que Bullet
interpreta que un cuerpo sin masa es equivalente a uno con masa
infinita; es decir, es inamovible. A partir de la forma del cuerpo y
de la masa de este, Bullet calcula la inercia del cuerpo físico que
estamos construyendo a través del método
&lt;em&gt;btCollisionShape::calculateLocalInertia&lt;/em&gt;. Una vez creado el cuerpo, hay que
añadirlo al mundo a través del método btDiscreteDynamicsWorld::addRigidBody.&lt;/p&gt;
&lt;p&gt;Bullet ofrece una gran variedad de formas primitivas de colisión, entre las que podemos listar:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtBoxShape.html"&gt;btBoxShape&lt;/a&gt;: caja definida por el tamaño de sus lados.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtSphereShape.html"&gt;btSphereShape&lt;/a&gt;: esfera definida por su radio.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtCapsuleShape.html"&gt;btCapsuleShape&lt;/a&gt;: capsula alrededor del eje Y. Tambien existen btCapsuleShapeX/Z.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtCylinderShape.html"&gt;btCylinderShape&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtConeShape.html"&gt;btConeShape&lt;/a&gt;: cono alrededor del eje Y. Tambien existen btConeShapeX/Z.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtMultiSphereShape.html"&gt;btMultiSphereShap&lt;/a&gt;: cascarón convexo formado a partir de varias esferas que puede ser usado para crear una capsula( a partir de dos esferas) u otras formas convexas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bullet tambien ofrece formas compuestas, pudiendo combinar múltiples
formas convexas en una única usando la clase &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtCompoundShape.html"&gt;btCompoundShape&lt;/a&gt;. Cada una de las formas que dan lugar a la malla principal se llama &lt;em&gt;forma hija&lt;/em&gt;. Cada &lt;em&gt;forma hija&lt;/em&gt; tiene sus propias transformaciones locales, relativas a la forma compuesta. Existen algunas formas de colisión mas avanzadas que
permiten ajustarse a geometrías que no corresponden con formas
primitivas. Para mas información, se aconseja consultar el &lt;a class="reference external" href="http://www.cs.uu.nl/docs/vakken/mgp/assignment/Bullet%20-%20User%20Manual.pdf"&gt;manual
oficial&lt;/a&gt; de Bullet. En la figura siguiente se muestra que ayuda en la elección de la forma  de colisión adecuada dependiendo de la situación.&lt;/p&gt;
&lt;img alt="esquema-formas.png" class="align-center" src="http://isaaclacoba.github.io/tinman/posts/introduccion-bullet/esquema-formas.png"&gt;
&lt;p&gt;Ya se ha visto la lógica que permite crear cuerpos rígidos, de modo que sólo queda crear nuestras esferas:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create_sphere&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;create_graphic_element&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//crea un nodo y una entidad de Ogre
&lt;/span&gt;  &lt;span class="n"&gt;create_physic_element&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;create_physic_element&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;btQuaternion&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;btQuaternion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btVector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                             &lt;span class="n"&gt;random_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;90.f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;btVector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;btTransform&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;btTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;btScalar&lt;/span&gt; &lt;span class="nf"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;btSphereShape&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sphere_shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
              &lt;span class="n"&gt;physics_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;create_shape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;ball_bodies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;physics_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="n"&gt;create_rigid_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ball_nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;sphere_shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;ball_bodies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setRestitution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.8f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ball_bodies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setFriction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;En el listado anterior se crea el cuerpo rígido y la forma de colisión de la esfera. Para construir el cuerpo rígido, se crea un &lt;a class="reference external" href="http://bulletphysics.org/Bullet/BulletFull/classbtTransform.html"&gt;btTransform&lt;/a&gt; que recibe un cuaternio y un vector. El cuaternio recibe un vector, mediante el cuál le indicamos en qué ejes sufrirá rotaciones nuestra esfera, y un float aleatorio entre 0 y 90, con el que indicamos los grados de rotación. Esto lo hacemos así para que cada bola que creamos rebote de una forma ligeramente distinta contra el suelo. El segundo parámetro de la transformación es el vector de traslación, que indica el lugar donde se creará la esfera. En este caso a 100 unidades sobre el eje Y.&lt;/p&gt;
&lt;p&gt;Para crear la forma de colisión esférica, se hace uso de una factoría de btCollisionShape implementada en el gestor de físicas. Lo único que hay que hacer es pasarle el radio de la esfera, en metros, y se creará la forma de colisión.&lt;/p&gt;
&lt;p&gt;Con estos parámetros se crea un cuerpo rígido haciendo uso del gestor de físicas. Una vez creado el cuerpo rígido, se configuran el &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Coeficiente_de_restituci%C3%B3n"&gt;coeficiente de restitución&lt;/a&gt;, que indica una medida del grado de conservación de la energía cinética en un choque entre partículas clásicas, y el &lt;a class="reference external" href="http://es.wikipedia.org/wiki/Coeficiente_de_rozamiento"&gt;coeficiente de fricción&lt;/a&gt;, que indica la oposición al deslizamiento que ofrecen dos superficies en contacto.&lt;/p&gt;
&lt;p&gt;Por último, falta integrar el cuerpo físico de Bullet con el cuerpo gráfico de Ogre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integrar-ogre3d-con-bullet"&gt;
&lt;h3&gt;Integrar Ogre3D con Bullet&lt;/h3&gt;
&lt;p&gt;Primero de todo, hay que entender que los cuerpos gráficos de Ogre3D y
los cuerpos físicos de Bullet son entidades completamente distintas y
separadas. Si no se implementa algún mecanismos mediante el cuál
Bullet actualice la posición y rotación de dicho cuerpo gráfico, se creará una situación de incoherencia en la cuál la posición del cuerpo gráfico permanecerá estática, al contrario que la del cuerpo físico que se verá actualizada. Esto provocará que el vídeo asociado a nuestro juego no se actualice, ya que Ogre es el encargado de crear las imágenes, mientras que Bullet tiene la responsabilidad de modelar un comportamiento realista sobre los cuerpos.&lt;/p&gt;
&lt;p&gt;Para solucionar este problema se crea la clase MotionState. Podemos ver su implementación en el siguiente listado:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyMotionState&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;btMotionState&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;protected:&lt;/span&gt;
          &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mSceneNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;btTransform&lt;/span&gt; &lt;span class="n"&gt;mInitialPosition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;public:&lt;/span&gt;
          &lt;span class="n"&gt;MyMotionState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;btTransform&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;initialPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;mSceneNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="n"&gt;mInitialPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;initialPosition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;MyMotionState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;mSceneNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;getWorldTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btTransform&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;worldTrans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="n"&gt;worldTrans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mInitialPosition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setWorldTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;btTransform&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;worldTrans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mSceneNode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// silently return before we set a node
&lt;/span&gt;
              &lt;span class="n"&gt;btQuaternion&lt;/span&gt; &lt;span class="n"&gt;rot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;worldTrans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getRotation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
              &lt;span class="n"&gt;mSceneNode&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;rot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;rot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;rot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
              &lt;span class="n"&gt;btVector3&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;worldTrans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOrigin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
              &lt;span class="n"&gt;mSceneNode&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;En el constructor de la clase se le pasa un nodo de escena de Ogre y la transformación inicial de dicho nodo. Es en el constructor de la clase btRigidBody donde se le pasa dicho objeto MotionState, que en nuestro caso se crea dentro del método &lt;em&gt;Physics::create_rigid_body&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hecho esto, el método que se encarga de sincronizar la posición del nodo de ogre asociado a un cuerpo rígido es el método &lt;em&gt;setWorldTransform&lt;/em&gt;. Este método se invoca de forma interna por parte Bullet cada vez que el cuerpo rígido ve modificado su estado en el transcurso normal de la simulación física del &lt;em&gt;Mundo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por último, sólo queda invocar el método btDiscreteDynamicsWorld::stepSimulation en cada iteración del bucle principal de juego, indicándole el tiempo transcurrido entre la llamada anterior y la siguiente. Dicho método implementa el pipeline físico donde se ejecuta la simulación. En el siguiente listado de código podemos ver el bucle principal del ejemplo:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;
&lt;span class="n"&gt;Game&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;game_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;delta_time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;exit_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;delta_time&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;timer_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_delta_time&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_time&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;input_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;check_events&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;physics_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;step_simulation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;scene_&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;render_one_frame&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;delta_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;El método step_simulation  del gestor de físicas simplemente encapsula la misma llamada al objeto &lt;em&gt;btDiscreteDynamicsWorld&lt;/em&gt;, que recibe como parámetros el delta time que hemos indicado y un entero que indica el número de subpasos que debe realizar dentro de la simulación física a la hora de interpolar la posición de los objetos físicos.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="aclaraciones-del-autor"&gt;
&lt;h2&gt;Aclaraciones del autor&lt;/h2&gt;
&lt;p&gt;En este post he intentado llegar a un equilibrio entre el nivel de profundidad de la explicación de los aspectos relacionados con Bullet y la sencillez del código fuente que ejemplifica dichos conceptos. He intentado que el ejemplo sea lo mas sencillo posible pero con la funcionalidad mínima que permita ver una utilidad real por parte del motor de físicas. Aún así el nivel de complejidad del ejemplo no es todo lo bajo que yo hubiese querido en un principio, pero creo que lo que presento aquí es el ejemplo mínimo de cómo integrar rápidamente Ogre3D con Bullet, de modo que pueda verse reflejado una de las primeras etapas que yo tuve que pasar en el proceso de aprendizaje que he sufrido a lo largo del desarrollo de mi proyecto.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://isaaclacoba.github.io/tinman/posts/introduccion-bullet/introduccion-a-bullet-physics.html</guid><pubDate>Sat, 07 Feb 2015 16:21:22 GMT</pubDate></item><item><title>Justificación y objetivos del proyecto</title><link>http://isaaclacoba.github.io/tinman/posts/justificacion-objetivos/justificacion-y-objetivos-del-proyecto.html</link><dc:creator>Isaac Lacoba Molina</dc:creator><description>&lt;div&gt;&lt;img alt="tinman.jpg" class="align-center" id="logo-tinman" src="http://isaaclacoba.github.io/tinman/posts/justificacion-objetivos/tinman.jpg"&gt;
&lt;p&gt;En esta entrada se explicará brevemente qué es el proyecto Tinman, se
justificarán las razones por las cuales se está realizando este
proyecto, y por último, se listarán los objetivos que se pretenden
cumplir con el desarrollo del mismo.&lt;/p&gt;
&lt;div class="section" id="que-es-tinman"&gt;
&lt;h2&gt;¿Qué es Tinman?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Tinman&lt;/em&gt; es el nombre corto de mi trabajo fin de Grado(TFG), que se titula: "Instrumentación de un videojuego 3D con fines docentes". El videojuego será un clon del famoso juego de carreras arcade "&lt;a class="reference external" href="http://es.wikipedia.org/wiki/Super_Off_Road"&gt;Super Off Road&lt;/a&gt;", y de aquí es de donde surge &lt;em&gt;Tinman&lt;/em&gt; como nombre de mi proyecto, a modo de broma, dado que el juego original llevó el nombre de Ivan "Ironman" Stewart, un famoso piloto del estilo &lt;em&gt;Off-Road&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Este proyecto nació con el espíritu de crear un videojuego que fuese útil como caso práctico sobre el que estudiar toda una serie de técnicas relacionadas con el desarrollo de videojuegos. Es obvio que se trata de un proyecto muy ambicioso y por ello se ha de acotar el alcance del mismo. Del título, lo que más puede llevar a confusión sea la última parte, con fines docentes. Debido a que desarrollar un &lt;em&gt;Serius Game&lt;/em&gt; específicamente orientado a desarrolladores se desmarca del objeto de evaluación dentro de un TFG, e incluso en una tesis de máster, el esfuerzo en este proyecto se ha centrado en desarrollar un código lo más limpio posible, sobre el que poder ejemplificar el uso de técnicas avanzadas como patrones de diseño o como &lt;a class="reference external" href="http://programmers.stackexchange.com/a/94567"&gt;idioms&lt;/a&gt; en C++, por poner algunos ejemplos.&lt;/p&gt;
&lt;p&gt;Para que lo anterior fuese posible se decidió licenciar el código del proyecto, así como todo el contenido generado, bajo una licencia libre. En nuestro caso, el proyecto se licencia bajo GPLv3.Se decidió usar una licencia libre porque si se pretendía enseñar a quien lo deseara cómo fue creado el proyecto, la forma mas sencilla pasaba por dar libertad para leer el código, modificarlo y distribuir tanto modificaciones del proyecto original como copias del mismo. Creo que la mejor forma de aprender a programar es programando, y a mí me resulta mas sencillo si tengo algo sobre lo que empezar.&lt;/p&gt;
&lt;p&gt;Por otra parte, no abundan proyectos libres en el mundo de los videojuegos y los que existen, o bien no se ha dado al código fuente el mimo que merece, o los creadores son ingenieros con una larga trayectoria, por lo que el código, aunque mantenible, flexible y bien estructurado, se hace difícil de estudiar para quien está comenzando a aprender y más complicado si estos proyectos están escritos en C++. Este lenguaje se ha convertido en estándar para la industria del videojuego, por múltiples razones. No sólo ofrece tanto mecanismos de muy alto nivel, tambien permite trabajar a nivel de dirección de memoria, de registro,...con lo que ofrece al ingeniero una flexibilidad que no se encuentra en otros lenguajes. Además, al ser compilado, permite optimizaciones de bajo nivel que no ofrecen otros lenguajes basados en máquinas virtuales o interpretados.&lt;/p&gt;
&lt;p&gt;Pero alguien podría estar preguntándose: ¿realmente un videojuego se justifica como trabajo fin de Grado?&lt;/p&gt;
&lt;p&gt;Según la "&lt;a class="reference external" href="http://webpub.esi.uclm.es/archivos/336/Normativa-TFGs"&gt;Normativa sobre la elaboración y defensa del Trabajo Fin
de Grado&lt;/a&gt;"
de la Escuela Superior de Informática de Ciudad Real, su artículo 2º
&lt;em&gt;Naturaleza del Trabajo Fin de Grado&lt;/em&gt;, estipula lo siguiente:&lt;/p&gt;
&lt;p&gt;"El Trabajo Fin de Grado supone la realización por parte del estudiante, y de forma
individual, de un proyecto, memoria o estudio bajo la supervisión de
uno o más tutores/as, en el que se integren y desarrollen los
contenidos formativos recibidos, capacidades, competencias y
habilidades adquiridas durante el periodo de docencia del Grado en
Ingeniería Informática"&lt;/p&gt;
&lt;p&gt;El apaertado anterior señala que el TFG consiste en desarrollar, de manera individual, un proyecto, memoria o estudio; es decir, que no es requerida implementación alguna. El proyecto Tinman requiere la aplicación de técnicas avanzadas de ingeniería del Software, sigue una metodología concreta de desarrollo (&lt;em&gt;desarrollo orientado por pruebas&lt;/em&gt;), requiere la capacidad para resolver problemas complejos, hace uso de un software de control de versiones, que ayuda a realizar un seguimiento del progreso del proyecto, etc. Todo esto hace que se cumpla  lo previamente citado para considerar este proyecto como TFG.&lt;/p&gt;
&lt;p&gt;Por otra parte, en todo proyecto debe contemplarse, de una forma u otra, el contexto económico. En ese sentido, el sector de los videojuegos está en pleno auge. Por aportar algunas cifras, la empresa NewZoo en su &lt;a class="reference external" href="http://www.newzoo.com/insights/global-games-market-will-reach-102-9-billion-2017-2/"&gt;publicación&lt;/a&gt; sobre la situación mundial del mercado del videojuego señalaba que si la progresión de crecimiento actual se mantiene, se espera que la cifra de facturación mundial ascienda desde los 81.400 millones de dólares actuales en 2014 hasta los 102.900 millones en 2017. No hace es necesario ser economista para darse cuenta que el volumen de facturación es impresionante y que por sí sólo justifica la creación de nuevos proyectos orientados a este sector.&lt;/p&gt;
&lt;img alt="mercado-videojuego.png" class="align-center" id="grafico-mercado" src="http://isaaclacoba.github.io/tinman/posts/justificacion-objetivos/mercado-videojuego.png"&gt;
&lt;p&gt;Para finalizar, se listarán los objetivos que se pretenden cumplir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objetivos"&gt;
&lt;h2&gt;Objetivos&lt;/h2&gt;
&lt;p&gt;En primer lugar se pretende desarrollar de un videojuego, utilizando
gráficos en 3D. Aunque el videojuego en sí ya es un objetivo de envergadura, este proyecto pretende utilizarlo como base para dos objetivos adicionales:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Diseño e implementación de mecanismos de instrumentación del juego que permitan
aplicar técnicas de testing automático y al mismo tiempo exponer los mecanismos internos con fines didácticos y de depuración.&lt;/li&gt;
&lt;li&gt;Diseño e implementación de un modelo de red para una modalidad multijugador, que
aprovechará los citados mecanismos de instrumentación con los mismos fines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Otro objetivo no menos importante es crear un ejemplo completo de videojuego que pueda servir a futuros programadores a aprender las técnicas básicas y los fundamentos técnicos esenciales del desarrollo de un videojuego. Por ese motivo se hará énfasis en los siguientes aspectos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Claridad del código.&lt;/li&gt;
&lt;li&gt;Uso de patrones de diseño.&lt;/li&gt;
&lt;li&gt;Técnicas de introspección de objetos.&lt;/li&gt;
&lt;li&gt;Acceso al código fuente y al propio proyecto. Por esta razón se
distribuirá bajo una licencia libre.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://isaaclacoba.github.io/tinman/posts/justificacion-objetivos/justificacion-y-objetivos-del-proyecto.html</guid><pubDate>Sat, 24 Jan 2015 10:06:19 GMT</pubDate></item><item><title>Introducción a Ogre3D</title><link>http://isaaclacoba.github.io/tinman/posts/introduccion-ogre3d/introduccion-a-ogre3d.html</link><dc:creator>Isaac Lacoba Molina</dc:creator><description>&lt;div&gt;&lt;img alt="ogre-logo.png" class="align-center" src="http://isaaclacoba.github.io/tinman/posts/introduccion-ogre3d/ogre-logo.png"&gt;
&lt;p&gt;En esta primera entrada hablaremos brevemente de Ogre3D, y de porqué
se ha elegido como biblioteca de renderizado. Para ejemplificarlo, se
ha creado un pequeño programa usando Ogre en el que se renderiza su
mascota, Sinbad, al mismo tiempo que servirá como ejemplo para mostrar
la estructura típica de un programa que hace uso de esta biblioteca.&lt;/p&gt;
&lt;p&gt;Este post es una adaptación del tutorial que realicé hace unos meses y que podeis encontrar aquí: &lt;a class="reference external" href="https://bitbucket.org/IsaacLacoba/intro-ogre/overview"&gt;https://bitbucket.org/IsaacLacoba/intro-ogre/overview&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="que-es-ogre3d"&gt;
&lt;h2&gt;¿Qué es Ogre3D?&lt;/h2&gt;
&lt;p&gt;Ogre3D(&lt;a class="reference external" href="http://www.ogre3d.org/"&gt;Object-Oriented Graphic Engine&lt;/a&gt;) es
un motor de renderizado de propósito general creado por Steve
Streeting(tambien conocido como Sinbad) distribuido bajo licencia
LGPL(&lt;a class="reference external" href="https://bitbucket.org/sinbad/ogre"&gt;repositorio-ogre3d&lt;/a&gt;). Fue
creado en 2001(&lt;a class="reference external" href="http://www.gamasutra.com/view/news/105533/QA_Steve_Streeting_On_Open_Source_3D_Engine_OGRE_3D.php"&gt;entrevista-streeting&lt;/a&gt;)
con el propósito de crear un componente de renderizado en tiempo real
sin hacer asunciones a nivel de aplicación. El objetivo era crear un
componente genérico que pudiese ser ampliado a través de
plugins. Desde un principio el proyecto se diseñó teniendo en cuenta
la mantenibilidad y la facilidad de ampliación.&lt;/p&gt;
&lt;p&gt;Ogre3D no fue concebido como un motor de juegos. Se pretendía cubrir
el mayor espectro posible,de manera que no sólo sirviese a campos como
el de los videojuegos, sino tambien a los de simulación, realidad
aumentada, realidad virtual,...y en general, cualquier campo que
requiriese del uso de herramientas de renderizado en tiempo real.&lt;/p&gt;
&lt;p&gt;Además, el hecho de que se distribuya bajo una licencia de código
libre contribuye muchísimo más a su éxito. Esto es así debido a que la
comunidad está muy involucrada con el proyecto, cosa que podemos
observar en el &lt;a class="reference external" href="http://www.ogre3d.org/forums/"&gt;foro oficial&lt;/a&gt; del
proyecto, donde se resuelven dudas de desarrollo, se discute el
roadmap, etc. En cuanto a las &lt;a class="reference external" href="http://www.ogre3d.org/developers/submit-patch"&gt;politica de contribuciones&lt;/a&gt;, los usuarios de la
comunidad pueden colaborar bien realizando pull-request al repositorio
oficial con sus parches o bien reportando
bugs al &lt;a class="reference external" href="https://ogre3d.atlassian.net/browse/OGRE/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel"&gt;Jira del proyecto&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Como hemos dicho antes, Ogre3D no es un motor de juego. Esto implica
que será el desarrollador quien tenga que encargarse de aspectos como
la gestión de eventos de entrada (teclado,ratón,...), físicas, networking,
interfaces, etc. En el caso del desarrollo de interfaces existen maneras de crearlas
con Ogre a través del uso de overlays; sin embargo, esta
aproximación no es lo suficientemente flexible como para crear interfaces
avanzadas. Las características principales de Ogre son:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Mutiplataforma&lt;/strong&gt;: permite el desarrollo para sistemas Windows, GNU/Linux y Mac OS X.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diseño a alto nivel&lt;/strong&gt;: Ogre3D encapsula llamadas a las librerías
gráficas DirectX y OpenGL. Además, hace uso de patrones de diseño:
&lt;em&gt;observer&lt;/em&gt; para informar de eventos y cambios de estado,
&lt;em&gt;singleton&lt;/em&gt; para evitar que exista mas de una instancia de
cualquier manager, &lt;em&gt;visitor&lt;/em&gt; para realizar operaciones sobre
un objeto y evitar modificarlo (por ejemplo, en los nodos del grafo
de escena), &lt;em&gt;façade&lt;/em&gt; para unificar el acceso a operaciones,
&lt;em&gt;factory&lt;/em&gt; para creación de objetos concretos de interfaces
abstractas, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grafo de escena&lt;/strong&gt;: una de las características mas
importantes del grafo de escena de Ogre es que desacopla el propio
grafo del contenido de la escena, definiendo una arquitectura de
pugins. A diferencia de otros motores gráficos, como Irrlicht3D,
Blitz3D o Unreal, Ogre no se basa en la herencia como principio de
diseño del grafo, sino en la composición. Esto permite expandir el
diseño para soportar otros tipos de datos, como audio o elementos de
simulación física. En la siguiente figura podemos ver
el esquema general del grafo de escena de Ogre.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Jerarquía general del grafo de escena." class="align-center" id="my-picture" src="http://isaaclacoba.github.io/tinman/posts/introduccion-ogre3d/grafo-escena.png" style="width: 250px;"&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Aceleración Hardware&lt;/strong&gt;: OGRE permite definir el comportamiento
de la parte programable de la GPU mediante la definición de Shaders,
estando al mismo nivel de otros motores como Unreal o CryEngine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Materiales&lt;/strong&gt;: se definen mediante un sistema de scripts y permiten
asignar o cambiar los materiales de los elementos de la escena sin
modificar el código fuente.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Animación&lt;/strong&gt;: tres tipos(skeletal, morph y pose). La animación y la
geometría asociada a los modelos se almacena en un único formato
binario optimizado. El proceso mas empleado se basa en la
exportación desde la aplicación de modelado y animación 3D a un
formato XML (Ogre XML) para convertirlo posteriormente al formato
binario optimizado mediante la herramienta de línea de órdenes
OgreXMLConverter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composición y Postprocesado&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gestión de Recursos&lt;/strong&gt;: Ogre ofrece una serie de gestores de
recursos, organizados jerárquicamente por grupos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Características específicas avanzadas&lt;/strong&gt;: El motor soporta gran
cantidad de características de visualización avanzadas, tales como
sombras dinámicas (basadas en diversas técnicas de cálculo),
sistemas de partículas, animación basada en esqueletos y de
vértices, y un largo etcétera. OGRE soporta además el uso de otras
bibliotecas auxiliares mediante plugins y conectores. Entre los más
utilizados cabe destacar las bibliotecas de simulación física ODE,
el soporte del metaformato Collada, o la reproducción de streaming
de vídeo con Theora.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="veamos-algo-de-codigo"&gt;
&lt;h2&gt;Veamos algo de código&lt;/h2&gt;
&lt;p&gt;El código fuente del ejemplo que vamos a estudiar lo podemos encontrar
en el siguiente repositorio:
&lt;a class="reference external" href="https://bitbucket.org/IsaacLacoba/intro-ogre/overview"&gt;https://bitbucket.org/IsaacLacoba/intro-ogre/overview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se ha creado un &lt;em&gt;¡Hola Mundo!&lt;/em&gt; en Ogre3D con la intención de que fuese
lo más sencillo posible. Por esta razón, lo único que hace el ejemplo
es renderizar la mascota de Ogre, Sinbad. En la &lt;a class="reference external" href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Tutorials"&gt;wiki del proyecto
Ogre&lt;/a&gt;
hay una colección muy interesante de tutoriales que es recomendable
que el lector interesado estudie. En los listados de código, intentaremos mostrar únicamente el código que se añade en cada paso.&lt;/p&gt;
&lt;p&gt;Pero antes de empezar, vamos a explicar como instalar Ogre3D en un
sistema operativo GNU/Linux. Consulta este &lt;a class="reference external" href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Installing+the+Ogre+SDK"&gt;tutorial&lt;/a&gt;
para saber como instalar Ogre3D en un sistema Microsoft Windows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="instalacion"&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;En distribuciones de GNU/Linux, la instalación de Ogre3D pasa por
instalar los siguientes paquetes:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# apt-get update apt-get install libogre-1.8.0 libogre-1.8-dev libogre-1.8.0-dbg freeglut3-dev libfreetype6 libfreetype6-dev libgl1-mesa-dev libgl1-mesa-glx&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Los tres primeros paquetes nos instalarán Ogre3D. Los siguientes
paquetes son dependencias indirectas de Ogre, los primeros de OpenGL y
los dos últimos instalarán el driver gráfico mesa.&lt;/p&gt;
&lt;div class="section" id="comprobando-la-instalacion"&gt;
&lt;h3&gt;Comprobando la instalación&lt;/h3&gt;
&lt;p&gt;Aunque el proceso de instalación ha sido extremadamente complejo, no
está de más comprobar que todo haya ido bien. Para comprobar que Ogre
se ha instalado correctamente, crearemos una instancia del objeto Root
y compilaremos el código.&lt;/p&gt;
&lt;p&gt;Primero, crearemos un fichero de texto llamado &lt;em&gt;main.cpp&lt;/em&gt; con el siguiente código:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="cp"&gt;#include &amp;lt;OgreRoot.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"config/plugins.cfg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"config/ogre.cfg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"config/ogre.log"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Para poder compilarlo, crearemos un sencillo makefile con el siguiente
código. Crea un fichero llamado Makefile y escribe el siguiente
codigo:&lt;/p&gt;
&lt;pre class="code make literal-block"&gt;
&lt;span class="nv"&gt;CXX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;g++
&lt;span class="nv"&gt;CXXFLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -std&lt;span class="o"&gt;=&lt;/span&gt;c++11 -ggdb &lt;span class="k"&gt;$(&lt;/span&gt;shell pkg-config --cflags OGRE OIS&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;LDLIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell pkg-config --libs OGRE OIS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.cpp&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Para compilarlo, abriremos un terminal en la carpeta donde
tengamos el codigo fuente y ejecutaremos:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;/pre&gt;
&lt;p&gt;Esto compilara nuestro codigo. Si la compilación se realizó sin
problemas, procederemos a ejecutar el binario:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;./main
&lt;/pre&gt;
&lt;p&gt;Si todo ha ido bien, la traza de inicialización de Ogre debiera
mostrarse por terminal y en el fichero "config/ogre.log". Hecho
esto, habremos comprobado que hemos instalado correctamente Ogre en
nuestro sistema. Ahora, continuemos construyendo nuestro ejemplo.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sigamos-programando"&gt;
&lt;h2&gt;Sigamos programando&lt;/h2&gt;
&lt;p&gt;El objeto que acabamos de crear es el objeto principal de Ogre, el
cual inicializa todos los componentes internos. Recibe hasta tres
parámetros, los cuales son las rutas a tres ficheros de configuración:
el primero indica la ruta de los plugins que se van a usar, el segundo
indica la configuración básica del sistema de renderizado(OpenGL o
DirectX, tamaño de la pantalla, frecuencia de refresco,...) y el
tercero es la ruta hacia el log donde Ogre volcará la traza, tanto de
inicialización como de destrucción de los recursos. Indicándole la
ruta hacia los ficheros, Ogre se encargará de crearlos si no
existiesen, únicamente en los dos últimos casos. En el caso del
fichero de plugins, hay que indicarle la ruta, ya que por defecto Ogre
no sabe donde buscarlos.&lt;/p&gt;
&lt;p&gt;Una vez hecho esto, añadiremos el siguiente código que permite indicar
a Ogre la configuración básica del sistema de renderizado:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;check_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;restoreConfig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;showConfigDialog&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;LogManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getSingleton&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;logMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Initialize::configure_ogre =&amp;gt; "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR: unable to configure Ogre"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"config/plugins.cfg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"config/ogre.cfg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"config/ogre.log"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;check_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Al ejecutarlo por primera vez, debería aparecer una pantalla como la siguiente:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="configuracion-ogre.png" class="align-center" src="http://isaaclacoba.github.io/tinman/posts/introduccion-ogre3d/configuracion-ogre.png"&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Este dialogo aparecerá cuando Ogre no encuentre el fichero
"config/ogre.cfg" (es decir, Ogre::Root::restoreConfig() devuelva
falso) e invoque al método Ogre::Root::showConfigDialog(). Debemos
asegurarnos de que la opción &lt;em&gt;Full Screen&lt;/em&gt; este marcada como
&lt;em&gt;No&lt;/em&gt;, de modo que podamos cerrar la aplicación de forma
correcta mas adelante. Hecho esto, podemos pulsar
&lt;em&gt;Accept&lt;/em&gt;. Internamente, Ogre invocará a los métodos
Ogre::Root::SetRenderSystem, Ogre::RenderSystem::setConfigOption y
Ogre::Root::saveConfig que establecen el sistema de renderizado, la
configuración del mismo y guardan dicha configuración en un fichero de
texto.&lt;/p&gt;
&lt;p&gt;El siguiente paso consiste en crear la ventana de nuestra aplicación,
donde se renderizará la escena. Existen dos formas de crear una
ventana: la primera es usando el constructor de la clase
Ogre::RenderWindow. La segunda, mas sencilla, es dejar que Ogre cree
una por defecto, basándose en la configuración obtenida del paso
anterior:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="cp"&gt;#include &amp;lt;OgreRenderWindow.h&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"config/plugins.cfg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"config/ogre.cfg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"config/ogre.log"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;check_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RenderWindow&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Titulo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Añadimos el fichero de cabecera y creamos la ventana por defecto con el método
Ogre::Root:initialize. El primer parámetro indica a Ogre que queremos que cree un
Ogre::RenderWindow. Internamente se invocará al método
Ogre::Root::createRenderWindow. Es importante señalar que solo se
puede invocar este método después de haber obtenido la configuración
básica del sistema de renderizado.&lt;/p&gt;
&lt;p&gt;Tras esto, procederemos a inicializar el gestor de escena:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;

 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="p"&gt;(...)&lt;/span&gt;
    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scene_manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createSceneManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ST_GENERIC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;La clase Ogre::SceneManager se encarga de organizar el
&lt;em&gt;culling&lt;/em&gt; y el proceso de renderizado de la escena, junto con
la clase Ogre::RenderQueue. Del mismo modo que antes, hacemos uso de
la instancia del objeto Root para inicializar el gestor de escena. El
método Ogre::Root::createSceneManager acepta un tipo enumerado llamado
&lt;a class="reference external" href="http://www.ogre3d.org/docs/api/1.9/group___scene.html#gga7383602bd480d43b80c626969b9af914a0af8f844019e52fe112e9a946a919fcd"&gt;Ogre::SceneType&lt;/a&gt;. Este tipo enumerado le indica a
Ogre qué tipo de &lt;a class="reference external" href="http://www.ogre3d.org/docs/api/1.9/class_ogre_1_1_scene_manager.html"&gt;SceneManger&lt;/a&gt; tiene que
devolver (para mas información ver el &lt;a class="reference external" href="http://www.ogre3d.org/tikiwiki/SceneManagersFAQ#Selecting_a_Scene_Manager"&gt;faq&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;El gestor de escena nos permitirá crear nuestros nodos de escena y
las entidades donde se cargarán las mallas 3D. Para ello, necesitamos
tener algo que renderizar, de modo que vamos a descargarnos las
mallas.&lt;/p&gt;
&lt;div class="section" id="obteniendo-recursos-multimedia"&gt;
&lt;h3&gt;Obteniendo recursos multimedia&lt;/h3&gt;
&lt;p&gt;En Internet podemos encontrar gran cantidad de contenido con licencia
creative commons que nos permitirá trabajar libremente con él, aunque
siempre hay que mirar cuidadosamente qué tipo de licencia tiene el
contenido multimedia que vamos a usar y respetarla en todo
momento. Para nuestro primer ejemplo, utilizaremos la mascota de
Ogre3D, Sinbad. Para ello, nos iremos al repositorio del
&lt;a class="reference external" href="https://bitbucket.org/sinbad/ogre/src/046a0d6687d11a4413db3bbb8d49cc721b083a48/Samples/Media/packs/?at=default"&gt;proyecto&lt;/a&gt;, a la carpeta &lt;strong&gt;Samples/Media/Packs&lt;/strong&gt;,
donde podremos encontrar mallas listas para ser usadas. Nos
descargaremos el pack llamadado &lt;em&gt;Sinbad.zip&lt;/em&gt;. A continuación,
crearemos una carpeta llamada &lt;em&gt;media&lt;/em&gt; dentro del directorio de
nuestro proyecto y descompromimos el contenido del archivo .zip allí.&lt;/p&gt;
&lt;p&gt;Hecho esto, los siguientes pasos que nos quedan son crear un nodo y
una entidad, adjuntar la entidad al nodo, así como crear un foco de
luz y una cámara.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creando-nuestra-escena"&gt;
&lt;h3&gt;Creando nuestra escena&lt;/h3&gt;
&lt;p&gt;El siguiente paso que deberemos realizar será crear un fichero que
permita saber a Ogre donde están los recursos multimedia. Dentro de la
carpeta &lt;em&gt;config&lt;/em&gt; crearemos un fichero llamado "resources.cfg"
con el siguiente contenido:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;General&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;FileSystem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;media
&lt;/pre&gt;
&lt;p&gt;Esto simplemente le indica a Ogre que dentro de la carpeta media
encontrara los recursos multimedia. Pero primero hay que parsear el
fichero y cargar dichos recursos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cargando-los-recursos"&gt;
&lt;h3&gt;Cargando los recursos&lt;/h3&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;OgreResourceGroupManager.h&amp;gt;
#include &amp;lt;OgreConfigFile.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;load_resources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;resources_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ConfigFile&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resources_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ConfigFile&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SectionIterator&lt;/span&gt; &lt;span class="n"&gt;seci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSectionIterator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;secName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;typeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;archName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seci&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasMoreElements&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;secName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seci&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;peekNextKey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ConfigFile&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SettingsMultiMap&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seci&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getNext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ConfigFile&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SettingsMultiMap&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;typeName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;archName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ResourceGroupManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getSingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addResourceLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;archName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;typeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ResourceGroupManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getSingleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialiseAllResourceGroups&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;(...)&lt;/span&gt;
  &lt;span class="n"&gt;load_resources&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"config/resources.cfg"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;La función anterior abre el fichero y lo va
recorriendo buscando claves. Cada clave indica el nombre de
un directorio donde hay recursos multimedia. Estos directorios los
recorre en el bucle &lt;em&gt;for&lt;/em&gt; buscando archivos de los que saca
el tipo, el nombre y los registra dentro del gestor de recursos
(Ogre::ResourcerGroupManager). Tras registrar todos los recursos que
haya encontrado, los inicializa.&lt;/p&gt;
&lt;p&gt;Es importante que se invoque la función
&lt;em&gt;load_resources(string)&lt;/em&gt; antes que la función
&lt;em&gt;check_config(Ogre::Root)&lt;/em&gt; en el caso en el que usemos
Ogre::Overlay. Si se invoca en orden contrario, el programa compilará
correctamente, pero lanzará un error de segmento.&lt;/p&gt;
&lt;p&gt;Este paso nos permitirá utilizar los recursos multimedia en nuestra
escena. Pero primero, deberemos crearemos la cámara y un foco de
luz.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creando-nuestra-camara"&gt;
&lt;h3&gt;Creando nuestra cámara&lt;/h3&gt;
&lt;p&gt;El objeto Ogre::Camera define la cámara de la escena. Este objeto es
imprescindible, pues sin él no podremos ver nada en nuestra
ventana. Para ello, añadiremos el siguiente código:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;OgreCamera.h&amp;gt;
&lt;/span&gt;
&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;create_camera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getSceneManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SceneManager"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Camera"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lookAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setNearClipDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setFarClipDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Viewport&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;viewport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getAutoCreatedWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;addViewport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;viewport&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setBackgroundColour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ColourValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setAspectRatio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewport&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getActualWidth&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Real&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewport&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getActualHeight&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]){&lt;/span&gt;
 &lt;span class="p"&gt;(...)&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Camera&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_camera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;En esta ocasión, utilizamos el gestor de escena para crear una cámara
asociada a él. Ogre permite tener mas de un gestor de escena, e ir
cambiando entre ellos. Es por esta razón que hay que asociar la cámara
a un gestor de escena.&lt;/p&gt;
&lt;p&gt;El objeto Ogre::Viewport es el equivalente al frustrum de la cámara;
es decir, indica la región que sera renderizada.&lt;/p&gt;
&lt;p&gt;Una vez inicializada la cámara, es importante añadir una fuente de
luz, ya que por defecto el mundo se haya en tinieblas:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;create_light&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Root&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getSceneManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SceneManager"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setShadowTechnique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SHADOWTYPE_STENCIL_ADDITIVE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setAmbientLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ColourValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Light&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MainLight"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setCastShadows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;(...)&lt;/span&gt;
  &lt;span class="n"&gt;create_light&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;El método Ogre::SceneManager:setShadowTechnique(Ogre::ShadowTechnique)
asigna la técnica de generación de sombras que sera usada por este
gestor de escena. El tipo &lt;a class="reference external" href="http://www.ogre3d.org/docs/api/1.9/group___general.html#ga79dcd426d291c31072c1ad6f183715d6"&gt;Ogre::ShadowTechnique&lt;/a&gt;
es un tipo enumerado que permite seleccionar una técnica de generación
de sombra.&lt;/p&gt;
&lt;p&gt;Una vez que tenemos listo todo lo necesario para que pueda renderizarse
nuestra escena, procederemos a crearla añadiendo nodos de escena.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="anadiendo-nodos-a-nuestra-escena"&gt;
&lt;h3&gt;Añadiendo nodos a nuestra escena&lt;/h3&gt;
&lt;p&gt;La forma en que Ogre desencapsula el grafo de escena y los objetos de
los mismos es mediante el objeto Ogre::SceneNode. Los objeto SceneNode
son los cuerpos gráficos genéricos sobre los que se realizarán las
operaciones de traslación, rotación, etc. A estos nodos hay que
adjuntarles un contenido, típicamente un objeto de tipo Ogre::Entity,
aunque se pueden adjuntar otros tipos de objetos. Veamos el código:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;OgreEntity.h&amp;gt;
#include &amp;lt;OgreVector3.h&amp;gt;
#include &amp;lt;OgreMath.h&amp;gt;
#include &amp;lt;OgreMeshManager.h&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;get_node_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;node_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getRootSceneNode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getSceneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;create_entity_and_attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;target_node&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;cast_shadows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_node_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setCastShadows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cast_shadows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;attachObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;create_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;parent_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_node_by_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parent_node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createChildSceneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;create_node_and_entity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                        &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_entity_and_attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_node_and_entity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scene_manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"SinbadNode"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Sinbad.mesh"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Las funciones anteriores son funciones de alto nivel que encapsulan
una funcionalidad relacionada con el nombre de la función. Aunque
parezca mucho código, las sentencias mas importantes son:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;parent_node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createChildSceneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;La sentencia anterior genera un nodo hijo cuyo nodo raíz es el nodo
padre(&lt;em&gt;parent_node&lt;/em&gt;). Esto es muy útil, ya que todas las
transformaciones que sufra el padre tambien las sufrirá el hijo. De
esta forma, podemos generar cuerpos compuestos y mover únicamente el
nodo padre, sabiendo que los nodos hijos se moverán de igual forma.&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Esta sentencia crea una instancia de un objeto tipo Ogre::Mesh. La
clase Ogre::Mesh almacena los datos necesarios para representar un
objeto tridimensional. Dicha malla la hemos cargado anteriormente en
el método &lt;em&gt;load_resources(std::string)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por último, utilizamos dos funciones muy similares para obtener la
referencia a los SceneNode por su nombre:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getRootSceneNode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SceneManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getSceneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;node_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;El primero devuelve la referencia al nodo raíz del grafo de escena y
el segundo al nodo que coincida con el nombre que se le pase por
argumentos.&lt;/p&gt;
&lt;p&gt;Por último, debemos añadir la sentencia que renderiza la escena. Para
poder parar nuestra aplicación, en este documento se hará uso de la
clase Ogre::WindowEventListener, que cuenta con el método
WindowClosing y windowClosed. Para ello crearemos una clase y haremos
que herede de Ogre::WindowEventListener:&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="cp"&gt;#include &amp;lt;OgreWindowEventUtilities.h&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WindowManager&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WindowEventListener&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RenderWindow&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;window_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;public:&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;WindowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RenderWindow&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;window_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WindowEventUtilities&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;addWindowEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;windowClosing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RenderWindow&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;LogManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getSingleton&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;logMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Closing window..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;windowClosed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RenderWindow&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;LogManager&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;getSingleton&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;logMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Window closed."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;(...)&lt;/span&gt;
  &lt;span class="n"&gt;WindowManager&lt;/span&gt; &lt;span class="n"&gt;windowManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;windowManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;renderOneFrame&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WindowEventUtilities&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;messagePump&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;La clase Ogre::WindowEventListener se encarga de gestionar todos los
eventos relacionados con una ventana.&lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="n"&gt;Ogre&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WindowEventUtilities&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;addWindowEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;La sentencia anterior se encarga de registrar la instancia de la clase
WindowManager como gestor de todos los eventos producidos en
&lt;em&gt;window&lt;/em&gt;. Los métodos &lt;em&gt;windowClosed&lt;/em&gt; y
&lt;em&gt;windowClosing&lt;/em&gt; se ejecutan cuando se detecta un evento de
cierre de ventana; es decir, cuando se pulsa el botón de salir de la
esquina superior derecha de la ventana.&lt;/p&gt;
&lt;p&gt;Se ha añadido el bucle principal a la función principal. El método
&lt;em&gt;renderOneFrame&lt;/em&gt; indica a Ogre que debe actualizar los cuerpos
gráficos de la escena, muestras que la sentencia
&lt;em&gt;messagePump()&lt;/em&gt; debe ser llamada una vez por frame, ya que
actualizará todas las ventanas que hayan sido registradas.&lt;/p&gt;
&lt;p&gt;Hecho esto, habremos terminado. Sólo faltará compilar y ejecutar
nuestra aplicación. El resultado deberá ser parecido al de la
siguiente figura.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;img alt="captura-ejecucion.png" class="align-center" src="http://isaaclacoba.github.io/tinman/posts/introduccion-ogre3d/captura-ejecucion.png"&gt;
&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;El código final debe parecerse al del fichero que podremos encontrar
en el &lt;a class="reference external" href="https://bitbucket.org/IsaacLacoba/intro-ogre/src/47e9565d0897607426587ef70798496f44f23ec8/src/main.cpp?at=master"&gt;repositorio de este tutorial&lt;/a&gt;&lt;/p&gt;
&lt;!-- LocalWords:  renderizada --&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://isaaclacoba.github.io/tinman/posts/introduccion-ogre3d/introduccion-a-ogre3d.html</guid><pubDate>Sat, 03 Jan 2015 09:41:32 GMT</pubDate></item><item><title>Presentación</title><link>http://isaaclacoba.github.io/tinman/posts/presentacion/presentacion.html</link><dc:creator>Isaac Lacoba Molina</dc:creator><description>&lt;div&gt;&lt;img alt="tinman.jpg" class="align-center" src="http://isaaclacoba.github.io/tinman/posts/presentacion/tinman.jpg"&gt;
&lt;p&gt;Este blog servirá como registro donde quedará plasmada la evolución de mi proyecto fin de grado.&lt;/p&gt;
&lt;p&gt;En él se explicará el porqué de cada decisión que se ha tomado y se tomará durante el desarrollo
del mismo de una forma sencilla y concisa, desarrollando las distintas alternativas que se han tenido
en consideración en cada momento.&lt;/p&gt;
&lt;p&gt;El código fuente del proyecto se puede encontrar en el siguiente link: &lt;a class="reference external" href="https://bitbucket.org/arco_group/tfg.tinman"&gt;https://bitbucket.org/arco_group/tfg.tinman&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="acerca-de-mi"&gt;
&lt;h2&gt;Acerca de mí:&lt;/h2&gt;
&lt;p&gt;Me llamo Isaac y actualmente soy estudiante de Grado en Ingeniería Informática en la Escuela Superior de Informática de Ciudad Real.
Soy oootro apasionado mas de la tecnología, prueba de ello es que haya elegido usar Nikola como generador de mi blog y github pages
como lugar donde alojarlo, en lugar de las miles de soluciones existentes que te facilitan la vida. Porque pudiendo seguir la solución dificil, ¿para qué vas a seguir la fácil?&lt;/p&gt;
&lt;p&gt;Esto último define bien mis preferencias. Desde siempre he sido un apasionado de los videojuegos. Y ya que el proyecto fin de grado es el broche final a lo que ha sido, hasta el momento, mi experiencia como estudiante universitario, decidí que sería perfecto finalizar con un proyecto que me definiese como ingeniero y como persona.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://isaaclacoba.github.io/tinman/posts/presentacion/presentacion.html</guid><pubDate>Wed, 03 Dec 2014 22:07:15 GMT</pubDate></item></channel></rss>